# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: parse_tree.proto

require 'google/protobuf'

Google::Protobuf::DescriptorPool.generated_pool.build do
  add_file("parse_tree.proto", :syntax => :proto3) do
    add_message "pg_query.Node" do
      oneof :node do
        optional :alias, :message, 1, "pg_query.Alias"
        optional :range_var, :message, 2, "pg_query.RangeVar"
        optional :table_func, :message, 3, "pg_query.TableFunc"
        optional :expr, :message, 4, "pg_query.Expr"
        optional :var, :message, 5, "pg_query.Var"
        optional :param, :message, 6, "pg_query.Param"
        optional :aggref, :message, 7, "pg_query.Aggref"
        optional :grouping_func, :message, 8, "pg_query.GroupingFunc"
        optional :window_func, :message, 9, "pg_query.WindowFunc"
        optional :subscripting_ref, :message, 10, "pg_query.SubscriptingRef"
        optional :func_expr, :message, 11, "pg_query.FuncExpr"
        optional :named_arg_expr, :message, 12, "pg_query.NamedArgExpr"
        optional :op_expr, :message, 13, "pg_query.OpExpr"
        optional :distinct_expr, :message, 14, "pg_query.DistinctExpr"
        optional :null_if_expr, :message, 15, "pg_query.NullIfExpr"
        optional :scalar_array_op_expr, :message, 16, "pg_query.ScalarArrayOpExpr"
        optional :bool_expr, :message, 17, "pg_query.BoolExpr"
        optional :sub_link, :message, 18, "pg_query.SubLink"
        optional :sub_plan, :message, 19, "pg_query.SubPlan"
        optional :alternative_sub_plan, :message, 20, "pg_query.AlternativeSubPlan"
        optional :field_select, :message, 21, "pg_query.FieldSelect"
        optional :field_store, :message, 22, "pg_query.FieldStore"
        optional :relabel_type, :message, 23, "pg_query.RelabelType"
        optional :coerce_via_io, :message, 24, "pg_query.CoerceViaIO"
        optional :array_coerce_expr, :message, 25, "pg_query.ArrayCoerceExpr"
        optional :convert_rowtype_expr, :message, 26, "pg_query.ConvertRowtypeExpr"
        optional :collate_expr, :message, 27, "pg_query.CollateExpr"
        optional :case_expr, :message, 28, "pg_query.CaseExpr"
        optional :case_when, :message, 29, "pg_query.CaseWhen"
        optional :case_test_expr, :message, 30, "pg_query.CaseTestExpr"
        optional :array_expr, :message, 31, "pg_query.ArrayExpr"
        optional :row_expr, :message, 32, "pg_query.RowExpr"
        optional :row_compare_expr, :message, 33, "pg_query.RowCompareExpr"
        optional :coalesce_expr, :message, 34, "pg_query.CoalesceExpr"
        optional :min_max_expr, :message, 35, "pg_query.MinMaxExpr"
        optional :sqlvalue_function, :message, 36, "pg_query.SQLValueFunction"
        optional :xml_expr, :message, 37, "pg_query.XmlExpr"
        optional :null_test, :message, 38, "pg_query.NullTest"
        optional :boolean_test, :message, 39, "pg_query.BooleanTest"
        optional :coerce_to_domain, :message, 40, "pg_query.CoerceToDomain"
        optional :coerce_to_domain_value, :message, 41, "pg_query.CoerceToDomainValue"
        optional :set_to_default, :message, 42, "pg_query.SetToDefault"
        optional :current_of_expr, :message, 43, "pg_query.CurrentOfExpr"
        optional :next_value_expr, :message, 44, "pg_query.NextValueExpr"
        optional :inference_elem, :message, 45, "pg_query.InferenceElem"
        optional :target_entry, :message, 46, "pg_query.TargetEntry"
        optional :range_tbl_ref, :message, 47, "pg_query.RangeTblRef"
        optional :join_expr, :message, 48, "pg_query.JoinExpr"
        optional :from_expr, :message, 49, "pg_query.FromExpr"
        optional :on_conflict_expr, :message, 50, "pg_query.OnConflictExpr"
        optional :into_clause, :message, 51, "pg_query.IntoClause"
        optional :raw_stmt, :message, 52, "pg_query.RawStmt"
        optional :query, :message, 53, "pg_query.Query"
        optional :insert_stmt, :message, 54, "pg_query.InsertStmt"
        optional :delete_stmt, :message, 55, "pg_query.DeleteStmt"
        optional :update_stmt, :message, 56, "pg_query.UpdateStmt"
        optional :select_stmt, :message, 57, "pg_query.SelectStmt"
        optional :alter_table_stmt, :message, 58, "pg_query.AlterTableStmt"
        optional :alter_table_cmd, :message, 59, "pg_query.AlterTableCmd"
        optional :alter_domain_stmt, :message, 60, "pg_query.AlterDomainStmt"
        optional :set_operation_stmt, :message, 61, "pg_query.SetOperationStmt"
        optional :grant_stmt, :message, 62, "pg_query.GrantStmt"
        optional :grant_role_stmt, :message, 63, "pg_query.GrantRoleStmt"
        optional :alter_default_privileges_stmt, :message, 64, "pg_query.AlterDefaultPrivilegesStmt"
        optional :close_portal_stmt, :message, 65, "pg_query.ClosePortalStmt"
        optional :cluster_stmt, :message, 66, "pg_query.ClusterStmt"
        optional :copy_stmt, :message, 67, "pg_query.CopyStmt"
        optional :create_stmt, :message, 68, "pg_query.CreateStmt"
        optional :define_stmt, :message, 69, "pg_query.DefineStmt"
        optional :drop_stmt, :message, 70, "pg_query.DropStmt"
        optional :truncate_stmt, :message, 71, "pg_query.TruncateStmt"
        optional :comment_stmt, :message, 72, "pg_query.CommentStmt"
        optional :fetch_stmt, :message, 73, "pg_query.FetchStmt"
        optional :index_stmt, :message, 74, "pg_query.IndexStmt"
        optional :create_function_stmt, :message, 75, "pg_query.CreateFunctionStmt"
        optional :alter_function_stmt, :message, 76, "pg_query.AlterFunctionStmt"
        optional :do_stmt, :message, 77, "pg_query.DoStmt"
        optional :rename_stmt, :message, 78, "pg_query.RenameStmt"
        optional :rule_stmt, :message, 79, "pg_query.RuleStmt"
        optional :notify_stmt, :message, 80, "pg_query.NotifyStmt"
        optional :listen_stmt, :message, 81, "pg_query.ListenStmt"
        optional :unlisten_stmt, :message, 82, "pg_query.UnlistenStmt"
        optional :transaction_stmt, :message, 83, "pg_query.TransactionStmt"
        optional :view_stmt, :message, 84, "pg_query.ViewStmt"
        optional :load_stmt, :message, 85, "pg_query.LoadStmt"
        optional :create_domain_stmt, :message, 86, "pg_query.CreateDomainStmt"
        optional :createdb_stmt, :message, 87, "pg_query.CreatedbStmt"
        optional :dropdb_stmt, :message, 88, "pg_query.DropdbStmt"
        optional :vacuum_stmt, :message, 89, "pg_query.VacuumStmt"
        optional :explain_stmt, :message, 90, "pg_query.ExplainStmt"
        optional :create_table_as_stmt, :message, 91, "pg_query.CreateTableAsStmt"
        optional :create_seq_stmt, :message, 92, "pg_query.CreateSeqStmt"
        optional :alter_seq_stmt, :message, 93, "pg_query.AlterSeqStmt"
        optional :variable_set_stmt, :message, 94, "pg_query.VariableSetStmt"
        optional :variable_show_stmt, :message, 95, "pg_query.VariableShowStmt"
        optional :discard_stmt, :message, 96, "pg_query.DiscardStmt"
        optional :create_trig_stmt, :message, 97, "pg_query.CreateTrigStmt"
        optional :create_plang_stmt, :message, 98, "pg_query.CreatePLangStmt"
        optional :create_role_stmt, :message, 99, "pg_query.CreateRoleStmt"
        optional :alter_role_stmt, :message, 100, "pg_query.AlterRoleStmt"
        optional :drop_role_stmt, :message, 101, "pg_query.DropRoleStmt"
        optional :lock_stmt, :message, 102, "pg_query.LockStmt"
        optional :constraints_set_stmt, :message, 103, "pg_query.ConstraintsSetStmt"
        optional :reindex_stmt, :message, 104, "pg_query.ReindexStmt"
        optional :check_point_stmt, :message, 105, "pg_query.CheckPointStmt"
        optional :create_schema_stmt, :message, 106, "pg_query.CreateSchemaStmt"
        optional :alter_database_stmt, :message, 107, "pg_query.AlterDatabaseStmt"
        optional :alter_database_set_stmt, :message, 108, "pg_query.AlterDatabaseSetStmt"
        optional :alter_role_set_stmt, :message, 109, "pg_query.AlterRoleSetStmt"
        optional :create_conversion_stmt, :message, 110, "pg_query.CreateConversionStmt"
        optional :create_cast_stmt, :message, 111, "pg_query.CreateCastStmt"
        optional :create_op_class_stmt, :message, 112, "pg_query.CreateOpClassStmt"
        optional :create_op_family_stmt, :message, 113, "pg_query.CreateOpFamilyStmt"
        optional :alter_op_family_stmt, :message, 114, "pg_query.AlterOpFamilyStmt"
        optional :prepare_stmt, :message, 115, "pg_query.PrepareStmt"
        optional :execute_stmt, :message, 116, "pg_query.ExecuteStmt"
        optional :deallocate_stmt, :message, 117, "pg_query.DeallocateStmt"
        optional :declare_cursor_stmt, :message, 118, "pg_query.DeclareCursorStmt"
        optional :create_table_space_stmt, :message, 119, "pg_query.CreateTableSpaceStmt"
        optional :drop_table_space_stmt, :message, 120, "pg_query.DropTableSpaceStmt"
        optional :alter_object_depends_stmt, :message, 121, "pg_query.AlterObjectDependsStmt"
        optional :alter_object_schema_stmt, :message, 122, "pg_query.AlterObjectSchemaStmt"
        optional :alter_owner_stmt, :message, 123, "pg_query.AlterOwnerStmt"
        optional :alter_operator_stmt, :message, 124, "pg_query.AlterOperatorStmt"
        optional :alter_type_stmt, :message, 125, "pg_query.AlterTypeStmt"
        optional :drop_owned_stmt, :message, 126, "pg_query.DropOwnedStmt"
        optional :reassign_owned_stmt, :message, 127, "pg_query.ReassignOwnedStmt"
        optional :composite_type_stmt, :message, 128, "pg_query.CompositeTypeStmt"
        optional :create_enum_stmt, :message, 129, "pg_query.CreateEnumStmt"
        optional :create_range_stmt, :message, 130, "pg_query.CreateRangeStmt"
        optional :alter_enum_stmt, :message, 131, "pg_query.AlterEnumStmt"
        optional :alter_tsdictionary_stmt, :message, 132, "pg_query.AlterTSDictionaryStmt"
        optional :alter_tsconfiguration_stmt, :message, 133, "pg_query.AlterTSConfigurationStmt"
        optional :create_fdw_stmt, :message, 134, "pg_query.CreateFdwStmt"
        optional :alter_fdw_stmt, :message, 135, "pg_query.AlterFdwStmt"
        optional :create_foreign_server_stmt, :message, 136, "pg_query.CreateForeignServerStmt"
        optional :alter_foreign_server_stmt, :message, 137, "pg_query.AlterForeignServerStmt"
        optional :create_user_mapping_stmt, :message, 138, "pg_query.CreateUserMappingStmt"
        optional :alter_user_mapping_stmt, :message, 139, "pg_query.AlterUserMappingStmt"
        optional :drop_user_mapping_stmt, :message, 140, "pg_query.DropUserMappingStmt"
        optional :alter_table_space_options_stmt, :message, 141, "pg_query.AlterTableSpaceOptionsStmt"
        optional :alter_table_move_all_stmt, :message, 142, "pg_query.AlterTableMoveAllStmt"
        optional :sec_label_stmt, :message, 143, "pg_query.SecLabelStmt"
        optional :create_foreign_table_stmt, :message, 144, "pg_query.CreateForeignTableStmt"
        optional :import_foreign_schema_stmt, :message, 145, "pg_query.ImportForeignSchemaStmt"
        optional :create_extension_stmt, :message, 146, "pg_query.CreateExtensionStmt"
        optional :alter_extension_stmt, :message, 147, "pg_query.AlterExtensionStmt"
        optional :alter_extension_contents_stmt, :message, 148, "pg_query.AlterExtensionContentsStmt"
        optional :create_event_trig_stmt, :message, 149, "pg_query.CreateEventTrigStmt"
        optional :alter_event_trig_stmt, :message, 150, "pg_query.AlterEventTrigStmt"
        optional :refresh_mat_view_stmt, :message, 151, "pg_query.RefreshMatViewStmt"
        optional :replica_identity_stmt, :message, 152, "pg_query.ReplicaIdentityStmt"
        optional :alter_system_stmt, :message, 153, "pg_query.AlterSystemStmt"
        optional :create_policy_stmt, :message, 154, "pg_query.CreatePolicyStmt"
        optional :alter_policy_stmt, :message, 155, "pg_query.AlterPolicyStmt"
        optional :create_transform_stmt, :message, 156, "pg_query.CreateTransformStmt"
        optional :create_am_stmt, :message, 157, "pg_query.CreateAmStmt"
        optional :create_publication_stmt, :message, 158, "pg_query.CreatePublicationStmt"
        optional :alter_publication_stmt, :message, 159, "pg_query.AlterPublicationStmt"
        optional :create_subscription_stmt, :message, 160, "pg_query.CreateSubscriptionStmt"
        optional :alter_subscription_stmt, :message, 161, "pg_query.AlterSubscriptionStmt"
        optional :drop_subscription_stmt, :message, 162, "pg_query.DropSubscriptionStmt"
        optional :create_stats_stmt, :message, 163, "pg_query.CreateStatsStmt"
        optional :alter_collation_stmt, :message, 164, "pg_query.AlterCollationStmt"
        optional :call_stmt, :message, 165, "pg_query.CallStmt"
        optional :alter_stats_stmt, :message, 166, "pg_query.AlterStatsStmt"
        optional :a_expr, :message, 167, "pg_query.A_Expr"
        optional :column_ref, :message, 168, "pg_query.ColumnRef"
        optional :param_ref, :message, 169, "pg_query.ParamRef"
        optional :a_const, :message, 170, "pg_query.A_Const"
        optional :func_call, :message, 171, "pg_query.FuncCall"
        optional :a_star, :message, 172, "pg_query.A_Star"
        optional :a_indices, :message, 173, "pg_query.A_Indices"
        optional :a_indirection, :message, 174, "pg_query.A_Indirection"
        optional :a_array_expr, :message, 175, "pg_query.A_ArrayExpr"
        optional :res_target, :message, 176, "pg_query.ResTarget"
        optional :multi_assign_ref, :message, 177, "pg_query.MultiAssignRef"
        optional :type_cast, :message, 178, "pg_query.TypeCast"
        optional :collate_clause, :message, 179, "pg_query.CollateClause"
        optional :sort_by, :message, 180, "pg_query.SortBy"
        optional :window_def, :message, 181, "pg_query.WindowDef"
        optional :range_subselect, :message, 182, "pg_query.RangeSubselect"
        optional :range_function, :message, 183, "pg_query.RangeFunction"
        optional :range_table_sample, :message, 184, "pg_query.RangeTableSample"
        optional :range_table_func, :message, 185, "pg_query.RangeTableFunc"
        optional :range_table_func_col, :message, 186, "pg_query.RangeTableFuncCol"
        optional :type_name, :message, 187, "pg_query.TypeName"
        optional :column_def, :message, 188, "pg_query.ColumnDef"
        optional :index_elem, :message, 189, "pg_query.IndexElem"
        optional :constraint, :message, 190, "pg_query.Constraint"
        optional :def_elem, :message, 191, "pg_query.DefElem"
        optional :range_tbl_entry, :message, 192, "pg_query.RangeTblEntry"
        optional :range_tbl_function, :message, 193, "pg_query.RangeTblFunction"
        optional :table_sample_clause, :message, 194, "pg_query.TableSampleClause"
        optional :with_check_option, :message, 195, "pg_query.WithCheckOption"
        optional :sort_group_clause, :message, 196, "pg_query.SortGroupClause"
        optional :grouping_set, :message, 197, "pg_query.GroupingSet"
        optional :window_clause, :message, 198, "pg_query.WindowClause"
        optional :object_with_args, :message, 199, "pg_query.ObjectWithArgs"
        optional :access_priv, :message, 200, "pg_query.AccessPriv"
        optional :create_op_class_item, :message, 201, "pg_query.CreateOpClassItem"
        optional :table_like_clause, :message, 202, "pg_query.TableLikeClause"
        optional :function_parameter, :message, 203, "pg_query.FunctionParameter"
        optional :locking_clause, :message, 204, "pg_query.LockingClause"
        optional :row_mark_clause, :message, 205, "pg_query.RowMarkClause"
        optional :xml_serialize, :message, 206, "pg_query.XmlSerialize"
        optional :with_clause, :message, 207, "pg_query.WithClause"
        optional :infer_clause, :message, 208, "pg_query.InferClause"
        optional :on_conflict_clause, :message, 209, "pg_query.OnConflictClause"
        optional :common_table_expr, :message, 210, "pg_query.CommonTableExpr"
        optional :role_spec, :message, 211, "pg_query.RoleSpec"
        optional :trigger_transition, :message, 212, "pg_query.TriggerTransition"
        optional :partition_elem, :message, 213, "pg_query.PartitionElem"
        optional :partition_spec, :message, 214, "pg_query.PartitionSpec"
        optional :partition_bound_spec, :message, 215, "pg_query.PartitionBoundSpec"
        optional :partition_range_datum, :message, 216, "pg_query.PartitionRangeDatum"
        optional :partition_cmd, :message, 217, "pg_query.PartitionCmd"
        optional :vacuum_relation, :message, 218, "pg_query.VacuumRelation"
        optional :inline_code_block, :message, 219, "pg_query.InlineCodeBlock"
        optional :call_context, :message, 220, "pg_query.CallContext"
        optional :integer, :message, 221, "pg_query.Integer"
        optional :float, :message, 222, "pg_query.Float"
        optional :string, :message, 223, "pg_query.String"
        optional :bit_string, :message, 224, "pg_query.BitString"
        optional :null, :message, 225, "pg_query.Null"
        optional :list, :message, 226, "pg_query.List"
        optional :int_list, :message, 227, "pg_query.IntList"
        optional :oid_list, :message, 228, "pg_query.OidList"
      end
    end
    add_message "pg_query.Integer" do
      optional :ival, :int32, 1
    end
    add_message "pg_query.Float" do
      optional :str, :string, 1
    end
    add_message "pg_query.String" do
      optional :str, :string, 1
    end
    add_message "pg_query.BitString" do
      optional :str, :string, 1
    end
    add_message "pg_query.Null" do
    end
    add_message "pg_query.List" do
      repeated :items, :message, 1, "pg_query.Node"
    end
    add_message "pg_query.OidList" do
      repeated :items, :message, 1, "pg_query.Node"
    end
    add_message "pg_query.IntList" do
      repeated :items, :message, 1, "pg_query.Node"
    end
    add_message "pg_query.Alias" do
      optional :aliasname, :string, 1
      repeated :colnames, :message, 2, "pg_query.Node"
    end
    add_message "pg_query.RangeVar" do
      optional :catalogname, :string, 1
      optional :schemaname, :string, 2
      optional :relname, :string, 3
      optional :inh, :bool, 4
      optional :relpersistence, :string, 5
      optional :alias, :message, 6, "pg_query.Alias"
      optional :location, :int32, 7
    end
    add_message "pg_query.TableFunc" do
      repeated :ns_uris, :message, 1, "pg_query.Node"
      repeated :ns_names, :message, 2, "pg_query.Node"
      optional :docexpr, :message, 3, "pg_query.Node"
      optional :rowexpr, :message, 4, "pg_query.Node"
      repeated :colnames, :message, 5, "pg_query.Node"
      repeated :coltypes, :message, 6, "pg_query.Node"
      repeated :coltypmods, :message, 7, "pg_query.Node"
      repeated :colcollations, :message, 8, "pg_query.Node"
      repeated :colexprs, :message, 9, "pg_query.Node"
      repeated :coldefexprs, :message, 10, "pg_query.Node"
      optional :ordinalitycol, :int32, 11
      optional :location, :int32, 12
    end
    add_message "pg_query.Expr" do
    end
    add_message "pg_query.Var" do
      optional :xpr, :message, 1, "pg_query.Node"
      optional :varno, :uint32, 2
      optional :varattno, :int32, 3
      optional :vartype, :uint32, 4
      optional :vartypmod, :int32, 5
      optional :varcollid, :uint32, 6
      optional :varlevelsup, :uint32, 7
      optional :varnosyn, :uint32, 8
      optional :varattnosyn, :int32, 9
      optional :location, :int32, 10
    end
    add_message "pg_query.Param" do
      optional :xpr, :message, 1, "pg_query.Node"
      optional :paramkind, :enum, 2, "pg_query.ParamKind"
      optional :paramid, :int32, 3
      optional :paramtype, :uint32, 4
      optional :paramtypmod, :int32, 5
      optional :paramcollid, :uint32, 6
      optional :location, :int32, 7
    end
    add_message "pg_query.Aggref" do
      optional :xpr, :message, 1, "pg_query.Node"
      optional :aggfnoid, :uint32, 2
      optional :aggtype, :uint32, 3
      optional :aggcollid, :uint32, 4
      optional :inputcollid, :uint32, 5
      optional :aggtranstype, :uint32, 6
      repeated :aggargtypes, :message, 7, "pg_query.Node"
      repeated :aggdirectargs, :message, 8, "pg_query.Node"
      repeated :args, :message, 9, "pg_query.Node"
      repeated :aggorder, :message, 10, "pg_query.Node"
      repeated :aggdistinct, :message, 11, "pg_query.Node"
      optional :aggfilter, :message, 12, "pg_query.Node"
      optional :aggstar, :bool, 13
      optional :aggvariadic, :bool, 14
      optional :aggkind, :string, 15
      optional :agglevelsup, :uint32, 16
      optional :aggsplit, :enum, 17, "pg_query.AggSplit"
      optional :location, :int32, 18
    end
    add_message "pg_query.GroupingFunc" do
      optional :xpr, :message, 1, "pg_query.Node"
      repeated :args, :message, 2, "pg_query.Node"
      repeated :refs, :message, 3, "pg_query.Node"
      repeated :cols, :message, 4, "pg_query.Node"
      optional :agglevelsup, :uint32, 5
      optional :location, :int32, 6
    end
    add_message "pg_query.WindowFunc" do
      optional :xpr, :message, 1, "pg_query.Node"
      optional :winfnoid, :uint32, 2
      optional :wintype, :uint32, 3
      optional :wincollid, :uint32, 4
      optional :inputcollid, :uint32, 5
      repeated :args, :message, 6, "pg_query.Node"
      optional :aggfilter, :message, 7, "pg_query.Node"
      optional :winref, :uint32, 8
      optional :winstar, :bool, 9
      optional :winagg, :bool, 10
      optional :location, :int32, 11
    end
    add_message "pg_query.SubscriptingRef" do
      optional :xpr, :message, 1, "pg_query.Node"
      optional :refcontainertype, :uint32, 2
      optional :refelemtype, :uint32, 3
      optional :reftypmod, :int32, 4
      optional :refcollid, :uint32, 5
      repeated :refupperindexpr, :message, 6, "pg_query.Node"
      repeated :reflowerindexpr, :message, 7, "pg_query.Node"
      optional :refexpr, :message, 8, "pg_query.Node"
      optional :refassgnexpr, :message, 9, "pg_query.Node"
    end
    add_message "pg_query.FuncExpr" do
      optional :xpr, :message, 1, "pg_query.Node"
      optional :funcid, :uint32, 2
      optional :funcresulttype, :uint32, 3
      optional :funcretset, :bool, 4
      optional :funcvariadic, :bool, 5
      optional :funcformat, :enum, 6, "pg_query.CoercionForm"
      optional :funccollid, :uint32, 7
      optional :inputcollid, :uint32, 8
      repeated :args, :message, 9, "pg_query.Node"
      optional :location, :int32, 10
    end
    add_message "pg_query.NamedArgExpr" do
      optional :xpr, :message, 1, "pg_query.Node"
      optional :arg, :message, 2, "pg_query.Node"
      optional :name, :string, 3
      optional :argnumber, :int32, 4
      optional :location, :int32, 5
    end
    add_message "pg_query.OpExpr" do
      optional :xpr, :message, 1, "pg_query.Node"
      optional :opno, :uint32, 2
      optional :opfuncid, :uint32, 3
      optional :opresulttype, :uint32, 4
      optional :opretset, :bool, 5
      optional :opcollid, :uint32, 6
      optional :inputcollid, :uint32, 7
      repeated :args, :message, 8, "pg_query.Node"
      optional :location, :int32, 9
    end
    add_message "pg_query.DistinctExpr" do
      optional :xpr, :message, 1, "pg_query.Node"
      optional :opno, :uint32, 2
      optional :opfuncid, :uint32, 3
      optional :opresulttype, :uint32, 4
      optional :opretset, :bool, 5
      optional :opcollid, :uint32, 6
      optional :inputcollid, :uint32, 7
      repeated :args, :message, 8, "pg_query.Node"
      optional :location, :int32, 9
    end
    add_message "pg_query.NullIfExpr" do
      optional :xpr, :message, 1, "pg_query.Node"
      optional :opno, :uint32, 2
      optional :opfuncid, :uint32, 3
      optional :opresulttype, :uint32, 4
      optional :opretset, :bool, 5
      optional :opcollid, :uint32, 6
      optional :inputcollid, :uint32, 7
      repeated :args, :message, 8, "pg_query.Node"
      optional :location, :int32, 9
    end
    add_message "pg_query.ScalarArrayOpExpr" do
      optional :xpr, :message, 1, "pg_query.Node"
      optional :opno, :uint32, 2
      optional :opfuncid, :uint32, 3
      optional :use_or, :bool, 4
      optional :inputcollid, :uint32, 5
      repeated :args, :message, 6, "pg_query.Node"
      optional :location, :int32, 7
    end
    add_message "pg_query.BoolExpr" do
      optional :xpr, :message, 1, "pg_query.Node"
      optional :boolop, :enum, 2, "pg_query.BoolExprType"
      repeated :args, :message, 3, "pg_query.Node"
      optional :location, :int32, 4
    end
    add_message "pg_query.SubLink" do
      optional :xpr, :message, 1, "pg_query.Node"
      optional :sub_link_type, :enum, 2, "pg_query.SubLinkType"
      optional :sub_link_id, :int32, 3
      optional :testexpr, :message, 4, "pg_query.Node"
      repeated :oper_name, :message, 5, "pg_query.Node"
      optional :subselect, :message, 6, "pg_query.Node"
      optional :location, :int32, 7
    end
    add_message "pg_query.SubPlan" do
      optional :xpr, :message, 1, "pg_query.Node"
      optional :sub_link_type, :enum, 2, "pg_query.SubLinkType"
      optional :testexpr, :message, 3, "pg_query.Node"
      repeated :param_ids, :message, 4, "pg_query.Node"
      optional :plan_id, :int32, 5
      optional :plan_name, :string, 6
      optional :first_col_type, :uint32, 7
      optional :first_col_typmod, :int32, 8
      optional :first_col_collation, :uint32, 9
      optional :use_hash_table, :bool, 10
      optional :unknown_eq_false, :bool, 11
      optional :parallel_safe, :bool, 12
      repeated :set_param, :message, 13, "pg_query.Node"
      repeated :par_param, :message, 14, "pg_query.Node"
      repeated :args, :message, 15, "pg_query.Node"
      optional :startup_cost, :double, 16
      optional :per_call_cost, :double, 17
    end
    add_message "pg_query.AlternativeSubPlan" do
      optional :xpr, :message, 1, "pg_query.Node"
      repeated :subplans, :message, 2, "pg_query.Node"
    end
    add_message "pg_query.FieldSelect" do
      optional :xpr, :message, 1, "pg_query.Node"
      optional :arg, :message, 2, "pg_query.Node"
      optional :fieldnum, :int32, 3
      optional :resulttype, :uint32, 4
      optional :resulttypmod, :int32, 5
      optional :resultcollid, :uint32, 6
    end
    add_message "pg_query.FieldStore" do
      optional :xpr, :message, 1, "pg_query.Node"
      optional :arg, :message, 2, "pg_query.Node"
      repeated :newvals, :message, 3, "pg_query.Node"
      repeated :fieldnums, :message, 4, "pg_query.Node"
      optional :resulttype, :uint32, 5
    end
    add_message "pg_query.RelabelType" do
      optional :xpr, :message, 1, "pg_query.Node"
      optional :arg, :message, 2, "pg_query.Node"
      optional :resulttype, :uint32, 3
      optional :resulttypmod, :int32, 4
      optional :resultcollid, :uint32, 5
      optional :relabelformat, :enum, 6, "pg_query.CoercionForm"
      optional :location, :int32, 7
    end
    add_message "pg_query.CoerceViaIO" do
      optional :xpr, :message, 1, "pg_query.Node"
      optional :arg, :message, 2, "pg_query.Node"
      optional :resulttype, :uint32, 3
      optional :resultcollid, :uint32, 4
      optional :coerceformat, :enum, 5, "pg_query.CoercionForm"
      optional :location, :int32, 6
    end
    add_message "pg_query.ArrayCoerceExpr" do
      optional :xpr, :message, 1, "pg_query.Node"
      optional :arg, :message, 2, "pg_query.Node"
      optional :elemexpr, :message, 3, "pg_query.Node"
      optional :resulttype, :uint32, 4
      optional :resulttypmod, :int32, 5
      optional :resultcollid, :uint32, 6
      optional :coerceformat, :enum, 7, "pg_query.CoercionForm"
      optional :location, :int32, 8
    end
    add_message "pg_query.ConvertRowtypeExpr" do
      optional :xpr, :message, 1, "pg_query.Node"
      optional :arg, :message, 2, "pg_query.Node"
      optional :resulttype, :uint32, 3
      optional :convertformat, :enum, 4, "pg_query.CoercionForm"
      optional :location, :int32, 5
    end
    add_message "pg_query.CollateExpr" do
      optional :xpr, :message, 1, "pg_query.Node"
      optional :arg, :message, 2, "pg_query.Node"
      optional :coll_oid, :uint32, 3
      optional :location, :int32, 4
    end
    add_message "pg_query.CaseExpr" do
      optional :xpr, :message, 1, "pg_query.Node"
      optional :casetype, :uint32, 2
      optional :casecollid, :uint32, 3
      optional :arg, :message, 4, "pg_query.Node"
      repeated :args, :message, 5, "pg_query.Node"
      optional :defresult, :message, 6, "pg_query.Node"
      optional :location, :int32, 7
    end
    add_message "pg_query.CaseWhen" do
      optional :xpr, :message, 1, "pg_query.Node"
      optional :expr, :message, 2, "pg_query.Node"
      optional :result, :message, 3, "pg_query.Node"
      optional :location, :int32, 4
    end
    add_message "pg_query.CaseTestExpr" do
      optional :xpr, :message, 1, "pg_query.Node"
      optional :type_id, :uint32, 2
      optional :type_mod, :int32, 3
      optional :collation, :uint32, 4
    end
    add_message "pg_query.ArrayExpr" do
      optional :xpr, :message, 1, "pg_query.Node"
      optional :array_typeid, :uint32, 2
      optional :array_collid, :uint32, 3
      optional :element_typeid, :uint32, 4
      repeated :elements, :message, 5, "pg_query.Node"
      optional :multidims, :bool, 6
      optional :location, :int32, 7
    end
    add_message "pg_query.RowExpr" do
      optional :xpr, :message, 1, "pg_query.Node"
      repeated :args, :message, 2, "pg_query.Node"
      optional :row_typeid, :uint32, 3
      optional :row_format, :enum, 4, "pg_query.CoercionForm"
      repeated :colnames, :message, 5, "pg_query.Node"
      optional :location, :int32, 6
    end
    add_message "pg_query.RowCompareExpr" do
      optional :xpr, :message, 1, "pg_query.Node"
      optional :rctype, :enum, 2, "pg_query.RowCompareType"
      repeated :opnos, :message, 3, "pg_query.Node"
      repeated :opfamilies, :message, 4, "pg_query.Node"
      repeated :inputcollids, :message, 5, "pg_query.Node"
      repeated :largs, :message, 6, "pg_query.Node"
      repeated :rargs, :message, 7, "pg_query.Node"
    end
    add_message "pg_query.CoalesceExpr" do
      optional :xpr, :message, 1, "pg_query.Node"
      optional :coalescetype, :uint32, 2
      optional :coalescecollid, :uint32, 3
      repeated :args, :message, 4, "pg_query.Node"
      optional :location, :int32, 5
    end
    add_message "pg_query.MinMaxExpr" do
      optional :xpr, :message, 1, "pg_query.Node"
      optional :minmaxtype, :uint32, 2
      optional :minmaxcollid, :uint32, 3
      optional :inputcollid, :uint32, 4
      optional :op, :enum, 5, "pg_query.MinMaxOp"
      repeated :args, :message, 6, "pg_query.Node"
      optional :location, :int32, 7
    end
    add_message "pg_query.SQLValueFunction" do
      optional :xpr, :message, 1, "pg_query.Node"
      optional :op, :enum, 2, "pg_query.SQLValueFunctionOp"
      optional :type, :uint32, 3
      optional :typmod, :int32, 4
      optional :location, :int32, 5
    end
    add_message "pg_query.XmlExpr" do
      optional :xpr, :message, 1, "pg_query.Node"
      optional :op, :enum, 2, "pg_query.XmlExprOp"
      optional :name, :string, 3
      repeated :named_args, :message, 4, "pg_query.Node"
      repeated :arg_names, :message, 5, "pg_query.Node"
      repeated :args, :message, 6, "pg_query.Node"
      optional :xmloption, :enum, 7, "pg_query.XmlOptionType"
      optional :type, :uint32, 8
      optional :typmod, :int32, 9
      optional :location, :int32, 10
    end
    add_message "pg_query.NullTest" do
      optional :xpr, :message, 1, "pg_query.Node"
      optional :arg, :message, 2, "pg_query.Node"
      optional :nulltesttype, :enum, 3, "pg_query.NullTestType"
      optional :argisrow, :bool, 4
      optional :location, :int32, 5
    end
    add_message "pg_query.BooleanTest" do
      optional :xpr, :message, 1, "pg_query.Node"
      optional :arg, :message, 2, "pg_query.Node"
      optional :booltesttype, :enum, 3, "pg_query.BoolTestType"
      optional :location, :int32, 4
    end
    add_message "pg_query.CoerceToDomain" do
      optional :xpr, :message, 1, "pg_query.Node"
      optional :arg, :message, 2, "pg_query.Node"
      optional :resulttype, :uint32, 3
      optional :resulttypmod, :int32, 4
      optional :resultcollid, :uint32, 5
      optional :coercionformat, :enum, 6, "pg_query.CoercionForm"
      optional :location, :int32, 7
    end
    add_message "pg_query.CoerceToDomainValue" do
      optional :xpr, :message, 1, "pg_query.Node"
      optional :type_id, :uint32, 2
      optional :type_mod, :int32, 3
      optional :collation, :uint32, 4
      optional :location, :int32, 5
    end
    add_message "pg_query.SetToDefault" do
      optional :xpr, :message, 1, "pg_query.Node"
      optional :type_id, :uint32, 2
      optional :type_mod, :int32, 3
      optional :collation, :uint32, 4
      optional :location, :int32, 5
    end
    add_message "pg_query.CurrentOfExpr" do
      optional :xpr, :message, 1, "pg_query.Node"
      optional :cvarno, :uint32, 2
      optional :cursor_name, :string, 3
      optional :cursor_param, :int32, 4
    end
    add_message "pg_query.NextValueExpr" do
      optional :xpr, :message, 1, "pg_query.Node"
      optional :seqid, :uint32, 2
      optional :type_id, :uint32, 3
    end
    add_message "pg_query.InferenceElem" do
      optional :xpr, :message, 1, "pg_query.Node"
      optional :expr, :message, 2, "pg_query.Node"
      optional :infercollid, :uint32, 3
      optional :inferopclass, :uint32, 4
    end
    add_message "pg_query.TargetEntry" do
      optional :xpr, :message, 1, "pg_query.Node"
      optional :expr, :message, 2, "pg_query.Node"
      optional :resno, :int32, 3
      optional :resname, :string, 4
      optional :ressortgroupref, :uint32, 5
      optional :resorigtbl, :uint32, 6
      optional :resorigcol, :int32, 7
      optional :resjunk, :bool, 8
    end
    add_message "pg_query.RangeTblRef" do
      optional :rtindex, :int32, 1
    end
    add_message "pg_query.JoinExpr" do
      optional :jointype, :enum, 1, "pg_query.JoinType"
      optional :is_natural, :bool, 2
      optional :larg, :message, 3, "pg_query.Node"
      optional :rarg, :message, 4, "pg_query.Node"
      repeated :using_clause, :message, 5, "pg_query.Node"
      optional :quals, :message, 6, "pg_query.Node"
      optional :alias, :message, 7, "pg_query.Alias"
      optional :rtindex, :int32, 8
    end
    add_message "pg_query.FromExpr" do
      repeated :fromlist, :message, 1, "pg_query.Node"
      optional :quals, :message, 2, "pg_query.Node"
    end
    add_message "pg_query.OnConflictExpr" do
      optional :action, :enum, 1, "pg_query.OnConflictAction"
      repeated :arbiter_elems, :message, 2, "pg_query.Node"
      optional :arbiter_where, :message, 3, "pg_query.Node"
      optional :constraint, :uint32, 4
      repeated :on_conflict_set, :message, 5, "pg_query.Node"
      optional :on_conflict_where, :message, 6, "pg_query.Node"
      optional :excl_rel_index, :int32, 7
      repeated :excl_rel_tlist, :message, 8, "pg_query.Node"
    end
    add_message "pg_query.IntoClause" do
      optional :rel, :message, 1, "pg_query.RangeVar"
      repeated :col_names, :message, 2, "pg_query.Node"
      optional :access_method, :string, 3
      repeated :options, :message, 4, "pg_query.Node"
      optional :on_commit, :enum, 5, "pg_query.OnCommitAction"
      optional :table_space_name, :string, 6
      optional :view_query, :message, 7, "pg_query.Node"
      optional :skip_data, :bool, 8
    end
    add_message "pg_query.RawStmt" do
      optional :stmt, :message, 1, "pg_query.Node"
      optional :stmt_location, :int32, 2
      optional :stmt_len, :int32, 3
    end
    add_message "pg_query.Query" do
      optional :command_type, :enum, 1, "pg_query.CmdType"
      optional :query_source, :enum, 2, "pg_query.QuerySource"
      optional :can_set_tag, :bool, 3
      optional :utility_stmt, :message, 4, "pg_query.Node"
      optional :result_relation, :int32, 5
      optional :has_aggs, :bool, 6
      optional :has_window_funcs, :bool, 7
      optional :has_target_srfs, :bool, 8
      optional :has_sub_links, :bool, 9
      optional :has_distinct_on, :bool, 10
      optional :has_recursive, :bool, 11
      optional :has_modifying_cte, :bool, 12
      optional :has_for_update, :bool, 13
      optional :has_row_security, :bool, 14
      repeated :cte_list, :message, 15, "pg_query.Node"
      repeated :rtable, :message, 16, "pg_query.Node"
      optional :jointree, :message, 17, "pg_query.FromExpr"
      repeated :target_list, :message, 18, "pg_query.Node"
      optional :override, :enum, 19, "pg_query.OverridingKind"
      optional :on_conflict, :message, 20, "pg_query.OnConflictExpr"
      repeated :returning_list, :message, 21, "pg_query.Node"
      repeated :group_clause, :message, 22, "pg_query.Node"
      repeated :grouping_sets, :message, 23, "pg_query.Node"
      optional :having_qual, :message, 24, "pg_query.Node"
      repeated :window_clause, :message, 25, "pg_query.Node"
      repeated :distinct_clause, :message, 26, "pg_query.Node"
      repeated :sort_clause, :message, 27, "pg_query.Node"
      optional :limit_offset, :message, 28, "pg_query.Node"
      optional :limit_count, :message, 29, "pg_query.Node"
      optional :limit_option, :enum, 30, "pg_query.LimitOption"
      repeated :row_marks, :message, 31, "pg_query.Node"
      optional :set_operations, :message, 32, "pg_query.Node"
      repeated :constraint_deps, :message, 33, "pg_query.Node"
      repeated :with_check_options, :message, 34, "pg_query.Node"
      optional :stmt_location, :int32, 35
      optional :stmt_len, :int32, 36
    end
    add_message "pg_query.InsertStmt" do
      optional :relation, :message, 1, "pg_query.RangeVar"
      repeated :cols, :message, 2, "pg_query.Node"
      optional :select_stmt, :message, 3, "pg_query.Node"
      optional :on_conflict_clause, :message, 4, "pg_query.OnConflictClause"
      repeated :returning_list, :message, 5, "pg_query.Node"
      optional :with_clause, :message, 6, "pg_query.WithClause"
      optional :override, :enum, 7, "pg_query.OverridingKind"
    end
    add_message "pg_query.DeleteStmt" do
      optional :relation, :message, 1, "pg_query.RangeVar"
      repeated :using_clause, :message, 2, "pg_query.Node"
      optional :where_clause, :message, 3, "pg_query.Node"
      repeated :returning_list, :message, 4, "pg_query.Node"
      optional :with_clause, :message, 5, "pg_query.WithClause"
    end
    add_message "pg_query.UpdateStmt" do
      optional :relation, :message, 1, "pg_query.RangeVar"
      repeated :target_list, :message, 2, "pg_query.Node"
      optional :where_clause, :message, 3, "pg_query.Node"
      repeated :from_clause, :message, 4, "pg_query.Node"
      repeated :returning_list, :message, 5, "pg_query.Node"
      optional :with_clause, :message, 6, "pg_query.WithClause"
    end
    add_message "pg_query.SelectStmt" do
      repeated :distinct_clause, :message, 1, "pg_query.Node"
      optional :into_clause, :message, 2, "pg_query.IntoClause"
      repeated :target_list, :message, 3, "pg_query.Node"
      repeated :from_clause, :message, 4, "pg_query.Node"
      optional :where_clause, :message, 5, "pg_query.Node"
      repeated :group_clause, :message, 6, "pg_query.Node"
      optional :having_clause, :message, 7, "pg_query.Node"
      repeated :window_clause, :message, 8, "pg_query.Node"
      repeated :values_lists, :message, 9, "pg_query.Node"
      repeated :sort_clause, :message, 10, "pg_query.Node"
      optional :limit_offset, :message, 11, "pg_query.Node"
      optional :limit_count, :message, 12, "pg_query.Node"
      optional :limit_option, :enum, 13, "pg_query.LimitOption"
      repeated :locking_clause, :message, 14, "pg_query.Node"
      optional :with_clause, :message, 15, "pg_query.WithClause"
      optional :op, :enum, 16, "pg_query.SetOperation"
      optional :all, :bool, 17
      optional :larg, :message, 18, "pg_query.SelectStmt"
      optional :rarg, :message, 19, "pg_query.SelectStmt"
    end
    add_message "pg_query.AlterTableStmt" do
      optional :relation, :message, 1, "pg_query.RangeVar"
      repeated :cmds, :message, 2, "pg_query.Node"
      optional :relkind, :enum, 3, "pg_query.ObjectType"
      optional :missing_ok, :bool, 4
    end
    add_message "pg_query.AlterTableCmd" do
      optional :subtype, :enum, 1, "pg_query.AlterTableType"
      optional :name, :string, 2
      optional :num, :int32, 3
      optional :newowner, :message, 4, "pg_query.RoleSpec"
      optional :def, :message, 5, "pg_query.Node"
      optional :behavior, :enum, 6, "pg_query.DropBehavior"
      optional :missing_ok, :bool, 7
    end
    add_message "pg_query.AlterDomainStmt" do
      optional :subtype, :string, 1
      repeated :type_name, :message, 2, "pg_query.Node"
      optional :name, :string, 3
      optional :def, :message, 4, "pg_query.Node"
      optional :behavior, :enum, 5, "pg_query.DropBehavior"
      optional :missing_ok, :bool, 6
    end
    add_message "pg_query.SetOperationStmt" do
      optional :op, :enum, 1, "pg_query.SetOperation"
      optional :all, :bool, 2
      optional :larg, :message, 3, "pg_query.Node"
      optional :rarg, :message, 4, "pg_query.Node"
      repeated :col_types, :message, 5, "pg_query.Node"
      repeated :col_typmods, :message, 6, "pg_query.Node"
      repeated :col_collations, :message, 7, "pg_query.Node"
      repeated :group_clauses, :message, 8, "pg_query.Node"
    end
    add_message "pg_query.GrantStmt" do
      optional :is_grant, :bool, 1
      optional :targtype, :enum, 2, "pg_query.GrantTargetType"
      optional :objtype, :enum, 3, "pg_query.ObjectType"
      repeated :objects, :message, 4, "pg_query.Node"
      repeated :privileges, :message, 5, "pg_query.Node"
      repeated :grantees, :message, 6, "pg_query.Node"
      optional :grant_option, :bool, 7
      optional :behavior, :enum, 8, "pg_query.DropBehavior"
    end
    add_message "pg_query.GrantRoleStmt" do
      repeated :granted_roles, :message, 1, "pg_query.Node"
      repeated :grantee_roles, :message, 2, "pg_query.Node"
      optional :is_grant, :bool, 3
      optional :admin_opt, :bool, 4
      optional :grantor, :message, 5, "pg_query.RoleSpec"
      optional :behavior, :enum, 6, "pg_query.DropBehavior"
    end
    add_message "pg_query.AlterDefaultPrivilegesStmt" do
      repeated :options, :message, 1, "pg_query.Node"
      optional :action, :message, 2, "pg_query.GrantStmt"
    end
    add_message "pg_query.ClosePortalStmt" do
      optional :portalname, :string, 1
    end
    add_message "pg_query.ClusterStmt" do
      optional :relation, :message, 1, "pg_query.RangeVar"
      optional :indexname, :string, 2
      optional :options, :int32, 3
    end
    add_message "pg_query.CopyStmt" do
      optional :relation, :message, 1, "pg_query.RangeVar"
      optional :query, :message, 2, "pg_query.Node"
      repeated :attlist, :message, 3, "pg_query.Node"
      optional :is_from, :bool, 4
      optional :is_program, :bool, 5
      optional :filename, :string, 6
      repeated :options, :message, 7, "pg_query.Node"
      optional :where_clause, :message, 8, "pg_query.Node"
    end
    add_message "pg_query.CreateStmt" do
      optional :relation, :message, 1, "pg_query.RangeVar"
      repeated :table_elts, :message, 2, "pg_query.Node"
      repeated :inh_relations, :message, 3, "pg_query.Node"
      optional :partbound, :message, 4, "pg_query.PartitionBoundSpec"
      optional :partspec, :message, 5, "pg_query.PartitionSpec"
      optional :of_typename, :message, 6, "pg_query.TypeName"
      repeated :constraints, :message, 7, "pg_query.Node"
      repeated :options, :message, 8, "pg_query.Node"
      optional :oncommit, :enum, 9, "pg_query.OnCommitAction"
      optional :tablespacename, :string, 10
      optional :access_method, :string, 11
      optional :if_not_exists, :bool, 12
    end
    add_message "pg_query.DefineStmt" do
      optional :kind, :enum, 1, "pg_query.ObjectType"
      optional :oldstyle, :bool, 2
      repeated :defnames, :message, 3, "pg_query.Node"
      repeated :args, :message, 4, "pg_query.Node"
      repeated :definition, :message, 5, "pg_query.Node"
      optional :if_not_exists, :bool, 6
      optional :replace, :bool, 7
    end
    add_message "pg_query.DropStmt" do
      repeated :objects, :message, 1, "pg_query.Node"
      optional :remove_type, :enum, 2, "pg_query.ObjectType"
      optional :behavior, :enum, 3, "pg_query.DropBehavior"
      optional :missing_ok, :bool, 4
      optional :concurrent, :bool, 5
    end
    add_message "pg_query.TruncateStmt" do
      repeated :relations, :message, 1, "pg_query.Node"
      optional :restart_seqs, :bool, 2
      optional :behavior, :enum, 3, "pg_query.DropBehavior"
    end
    add_message "pg_query.CommentStmt" do
      optional :objtype, :enum, 1, "pg_query.ObjectType"
      optional :object, :message, 2, "pg_query.Node"
      optional :comment, :string, 3
    end
    add_message "pg_query.FetchStmt" do
      optional :direction, :enum, 1, "pg_query.FetchDirection"
      optional :how_many, :int64, 2
      optional :portalname, :string, 3
      optional :ismove, :bool, 4
    end
    add_message "pg_query.IndexStmt" do
      optional :idxname, :string, 1
      optional :relation, :message, 2, "pg_query.RangeVar"
      optional :access_method, :string, 3
      optional :table_space, :string, 4
      repeated :index_params, :message, 5, "pg_query.Node"
      repeated :index_including_params, :message, 6, "pg_query.Node"
      repeated :options, :message, 7, "pg_query.Node"
      optional :where_clause, :message, 8, "pg_query.Node"
      repeated :exclude_op_names, :message, 9, "pg_query.Node"
      optional :idxcomment, :string, 10
      optional :index_oid, :uint32, 11
      optional :old_node, :uint32, 12
      optional :old_create_subid, :uint32, 13
      optional :old_first_relfilenode_subid, :uint32, 14
      optional :unique, :bool, 15
      optional :primary, :bool, 16
      optional :isconstraint, :bool, 17
      optional :deferrable, :bool, 18
      optional :initdeferred, :bool, 19
      optional :transformed, :bool, 20
      optional :concurrent, :bool, 21
      optional :if_not_exists, :bool, 22
      optional :reset_default_tblspc, :bool, 23
    end
    add_message "pg_query.CreateFunctionStmt" do
      optional :is_procedure, :bool, 1
      optional :replace, :bool, 2
      repeated :funcname, :message, 3, "pg_query.Node"
      repeated :parameters, :message, 4, "pg_query.Node"
      optional :return_type, :message, 5, "pg_query.TypeName"
      repeated :options, :message, 6, "pg_query.Node"
    end
    add_message "pg_query.AlterFunctionStmt" do
      optional :objtype, :enum, 1, "pg_query.ObjectType"
      optional :func, :message, 2, "pg_query.ObjectWithArgs"
      repeated :actions, :message, 3, "pg_query.Node"
    end
    add_message "pg_query.DoStmt" do
      repeated :args, :message, 1, "pg_query.Node"
    end
    add_message "pg_query.RenameStmt" do
      optional :rename_type, :enum, 1, "pg_query.ObjectType"
      optional :relation_type, :enum, 2, "pg_query.ObjectType"
      optional :relation, :message, 3, "pg_query.RangeVar"
      optional :object, :message, 4, "pg_query.Node"
      optional :subname, :string, 5
      optional :newname, :string, 6
      optional :behavior, :enum, 7, "pg_query.DropBehavior"
      optional :missing_ok, :bool, 8
    end
    add_message "pg_query.RuleStmt" do
      optional :relation, :message, 1, "pg_query.RangeVar"
      optional :rulename, :string, 2
      optional :where_clause, :message, 3, "pg_query.Node"
      optional :event, :enum, 4, "pg_query.CmdType"
      optional :instead, :bool, 5
      repeated :actions, :message, 6, "pg_query.Node"
      optional :replace, :bool, 7
    end
    add_message "pg_query.NotifyStmt" do
      optional :conditionname, :string, 1
      optional :payload, :string, 2
    end
    add_message "pg_query.ListenStmt" do
      optional :conditionname, :string, 1
    end
    add_message "pg_query.UnlistenStmt" do
      optional :conditionname, :string, 1
    end
    add_message "pg_query.TransactionStmt" do
      optional :kind, :enum, 1, "pg_query.TransactionStmtKind"
      repeated :options, :message, 2, "pg_query.Node"
      optional :savepoint_name, :string, 3
      optional :gid, :string, 4
      optional :chain, :bool, 5
    end
    add_message "pg_query.ViewStmt" do
      optional :view, :message, 1, "pg_query.RangeVar"
      repeated :aliases, :message, 2, "pg_query.Node"
      optional :query, :message, 3, "pg_query.Node"
      optional :replace, :bool, 4
      repeated :options, :message, 5, "pg_query.Node"
      optional :with_check_option, :enum, 6, "pg_query.ViewCheckOption"
    end
    add_message "pg_query.LoadStmt" do
      optional :filename, :string, 1
    end
    add_message "pg_query.CreateDomainStmt" do
      repeated :domainname, :message, 1, "pg_query.Node"
      optional :type_name, :message, 2, "pg_query.TypeName"
      optional :coll_clause, :message, 3, "pg_query.CollateClause"
      repeated :constraints, :message, 4, "pg_query.Node"
    end
    add_message "pg_query.CreatedbStmt" do
      optional :dbname, :string, 1
      repeated :options, :message, 2, "pg_query.Node"
    end
    add_message "pg_query.DropdbStmt" do
      optional :dbname, :string, 1
      optional :missing_ok, :bool, 2
      repeated :options, :message, 3, "pg_query.Node"
    end
    add_message "pg_query.VacuumStmt" do
      repeated :options, :message, 1, "pg_query.Node"
      repeated :rels, :message, 2, "pg_query.Node"
      optional :is_vacuumcmd, :bool, 3
    end
    add_message "pg_query.ExplainStmt" do
      optional :query, :message, 1, "pg_query.Node"
      repeated :options, :message, 2, "pg_query.Node"
    end
    add_message "pg_query.CreateTableAsStmt" do
      optional :query, :message, 1, "pg_query.Node"
      optional :into, :message, 2, "pg_query.IntoClause"
      optional :relkind, :enum, 3, "pg_query.ObjectType"
      optional :is_select_into, :bool, 4
      optional :if_not_exists, :bool, 5
    end
    add_message "pg_query.CreateSeqStmt" do
      optional :sequence, :message, 1, "pg_query.RangeVar"
      repeated :options, :message, 2, "pg_query.Node"
      optional :owner_id, :uint32, 3
      optional :for_identity, :bool, 4
      optional :if_not_exists, :bool, 5
    end
    add_message "pg_query.AlterSeqStmt" do
      optional :sequence, :message, 1, "pg_query.RangeVar"
      repeated :options, :message, 2, "pg_query.Node"
      optional :for_identity, :bool, 3
      optional :missing_ok, :bool, 4
    end
    add_message "pg_query.VariableSetStmt" do
      optional :kind, :enum, 1, "pg_query.VariableSetKind"
      optional :name, :string, 2
      repeated :args, :message, 3, "pg_query.Node"
      optional :is_local, :bool, 4
    end
    add_message "pg_query.VariableShowStmt" do
      optional :name, :string, 1
    end
    add_message "pg_query.DiscardStmt" do
      optional :target, :enum, 1, "pg_query.DiscardMode"
    end
    add_message "pg_query.CreateTrigStmt" do
      optional :trigname, :string, 1
      optional :relation, :message, 2, "pg_query.RangeVar"
      repeated :funcname, :message, 3, "pg_query.Node"
      repeated :args, :message, 4, "pg_query.Node"
      optional :row, :bool, 5
      optional :timing, :int32, 6
      optional :events, :int32, 7
      repeated :columns, :message, 8, "pg_query.Node"
      optional :when_clause, :message, 9, "pg_query.Node"
      optional :isconstraint, :bool, 10
      repeated :transition_rels, :message, 11, "pg_query.Node"
      optional :deferrable, :bool, 12
      optional :initdeferred, :bool, 13
      optional :constrrel, :message, 14, "pg_query.RangeVar"
    end
    add_message "pg_query.CreatePLangStmt" do
      optional :replace, :bool, 1
      optional :plname, :string, 2
      repeated :plhandler, :message, 3, "pg_query.Node"
      repeated :plinline, :message, 4, "pg_query.Node"
      repeated :plvalidator, :message, 5, "pg_query.Node"
      optional :pltrusted, :bool, 6
    end
    add_message "pg_query.CreateRoleStmt" do
      optional :stmt_type, :enum, 1, "pg_query.RoleStmtType"
      optional :role, :string, 2
      repeated :options, :message, 3, "pg_query.Node"
    end
    add_message "pg_query.AlterRoleStmt" do
      optional :role, :message, 1, "pg_query.RoleSpec"
      repeated :options, :message, 2, "pg_query.Node"
      optional :action, :int32, 3
    end
    add_message "pg_query.DropRoleStmt" do
      repeated :roles, :message, 1, "pg_query.Node"
      optional :missing_ok, :bool, 2
    end
    add_message "pg_query.LockStmt" do
      repeated :relations, :message, 1, "pg_query.Node"
      optional :mode, :int32, 2
      optional :nowait, :bool, 3
    end
    add_message "pg_query.ConstraintsSetStmt" do
      repeated :constraints, :message, 1, "pg_query.Node"
      optional :deferred, :bool, 2
    end
    add_message "pg_query.ReindexStmt" do
      optional :kind, :enum, 1, "pg_query.ReindexObjectType"
      optional :relation, :message, 2, "pg_query.RangeVar"
      optional :name, :string, 3
      optional :options, :int32, 4
      optional :concurrent, :bool, 5
    end
    add_message "pg_query.CheckPointStmt" do
    end
    add_message "pg_query.CreateSchemaStmt" do
      optional :schemaname, :string, 1
      optional :authrole, :message, 2, "pg_query.RoleSpec"
      repeated :schema_elts, :message, 3, "pg_query.Node"
      optional :if_not_exists, :bool, 4
    end
    add_message "pg_query.AlterDatabaseStmt" do
      optional :dbname, :string, 1
      repeated :options, :message, 2, "pg_query.Node"
    end
    add_message "pg_query.AlterDatabaseSetStmt" do
      optional :dbname, :string, 1
      optional :setstmt, :message, 2, "pg_query.VariableSetStmt"
    end
    add_message "pg_query.AlterRoleSetStmt" do
      optional :role, :message, 1, "pg_query.RoleSpec"
      optional :database, :string, 2
      optional :setstmt, :message, 3, "pg_query.VariableSetStmt"
    end
    add_message "pg_query.CreateConversionStmt" do
      repeated :conversion_name, :message, 1, "pg_query.Node"
      optional :for_encoding_name, :string, 2
      optional :to_encoding_name, :string, 3
      repeated :func_name, :message, 4, "pg_query.Node"
      optional :def, :bool, 5
    end
    add_message "pg_query.CreateCastStmt" do
      optional :sourcetype, :message, 1, "pg_query.TypeName"
      optional :targettype, :message, 2, "pg_query.TypeName"
      optional :func, :message, 3, "pg_query.ObjectWithArgs"
      optional :context, :enum, 4, "pg_query.CoercionContext"
      optional :inout, :bool, 5
    end
    add_message "pg_query.CreateOpClassStmt" do
      repeated :opclassname, :message, 1, "pg_query.Node"
      repeated :opfamilyname, :message, 2, "pg_query.Node"
      optional :amname, :string, 3
      optional :datatype, :message, 4, "pg_query.TypeName"
      repeated :items, :message, 5, "pg_query.Node"
      optional :is_default, :bool, 6
    end
    add_message "pg_query.CreateOpFamilyStmt" do
      repeated :opfamilyname, :message, 1, "pg_query.Node"
      optional :amname, :string, 2
    end
    add_message "pg_query.AlterOpFamilyStmt" do
      repeated :opfamilyname, :message, 1, "pg_query.Node"
      optional :amname, :string, 2
      optional :is_drop, :bool, 3
      repeated :items, :message, 4, "pg_query.Node"
    end
    add_message "pg_query.PrepareStmt" do
      optional :name, :string, 1
      repeated :argtypes, :message, 2, "pg_query.Node"
      optional :query, :message, 3, "pg_query.Node"
    end
    add_message "pg_query.ExecuteStmt" do
      optional :name, :string, 1
      repeated :params, :message, 2, "pg_query.Node"
    end
    add_message "pg_query.DeallocateStmt" do
      optional :name, :string, 1
    end
    add_message "pg_query.DeclareCursorStmt" do
      optional :portalname, :string, 1
      optional :options, :int32, 2
      optional :query, :message, 3, "pg_query.Node"
    end
    add_message "pg_query.CreateTableSpaceStmt" do
      optional :tablespacename, :string, 1
      optional :owner, :message, 2, "pg_query.RoleSpec"
      optional :location, :string, 3
      repeated :options, :message, 4, "pg_query.Node"
    end
    add_message "pg_query.DropTableSpaceStmt" do
      optional :tablespacename, :string, 1
      optional :missing_ok, :bool, 2
    end
    add_message "pg_query.AlterObjectDependsStmt" do
      optional :object_type, :enum, 1, "pg_query.ObjectType"
      optional :relation, :message, 2, "pg_query.RangeVar"
      optional :object, :message, 3, "pg_query.Node"
      optional :extname, :message, 4, "pg_query.Node"
      optional :remove, :bool, 5
    end
    add_message "pg_query.AlterObjectSchemaStmt" do
      optional :object_type, :enum, 1, "pg_query.ObjectType"
      optional :relation, :message, 2, "pg_query.RangeVar"
      optional :object, :message, 3, "pg_query.Node"
      optional :newschema, :string, 4
      optional :missing_ok, :bool, 5
    end
    add_message "pg_query.AlterOwnerStmt" do
      optional :object_type, :enum, 1, "pg_query.ObjectType"
      optional :relation, :message, 2, "pg_query.RangeVar"
      optional :object, :message, 3, "pg_query.Node"
      optional :newowner, :message, 4, "pg_query.RoleSpec"
    end
    add_message "pg_query.AlterOperatorStmt" do
      optional :opername, :message, 1, "pg_query.ObjectWithArgs"
      repeated :options, :message, 2, "pg_query.Node"
    end
    add_message "pg_query.AlterTypeStmt" do
      repeated :type_name, :message, 1, "pg_query.Node"
      repeated :options, :message, 2, "pg_query.Node"
    end
    add_message "pg_query.DropOwnedStmt" do
      repeated :roles, :message, 1, "pg_query.Node"
      optional :behavior, :enum, 2, "pg_query.DropBehavior"
    end
    add_message "pg_query.ReassignOwnedStmt" do
      repeated :roles, :message, 1, "pg_query.Node"
      optional :newrole, :message, 2, "pg_query.RoleSpec"
    end
    add_message "pg_query.CompositeTypeStmt" do
      optional :typevar, :message, 1, "pg_query.RangeVar"
      repeated :coldeflist, :message, 2, "pg_query.Node"
    end
    add_message "pg_query.CreateEnumStmt" do
      repeated :type_name, :message, 1, "pg_query.Node"
      repeated :vals, :message, 2, "pg_query.Node"
    end
    add_message "pg_query.CreateRangeStmt" do
      repeated :type_name, :message, 1, "pg_query.Node"
      repeated :params, :message, 2, "pg_query.Node"
    end
    add_message "pg_query.AlterEnumStmt" do
      repeated :type_name, :message, 1, "pg_query.Node"
      optional :old_val, :string, 2
      optional :new_val, :string, 3
      optional :new_val_neighbor, :string, 4
      optional :new_val_is_after, :bool, 5
      optional :skip_if_new_val_exists, :bool, 6
    end
    add_message "pg_query.AlterTSDictionaryStmt" do
      repeated :dictname, :message, 1, "pg_query.Node"
      repeated :options, :message, 2, "pg_query.Node"
    end
    add_message "pg_query.AlterTSConfigurationStmt" do
      optional :kind, :enum, 1, "pg_query.AlterTSConfigType"
      repeated :cfgname, :message, 2, "pg_query.Node"
      repeated :tokentype, :message, 3, "pg_query.Node"
      repeated :dicts, :message, 4, "pg_query.Node"
      optional :override, :bool, 5
      optional :replace, :bool, 6
      optional :missing_ok, :bool, 7
    end
    add_message "pg_query.CreateFdwStmt" do
      optional :fdwname, :string, 1
      repeated :func_options, :message, 2, "pg_query.Node"
      repeated :options, :message, 3, "pg_query.Node"
    end
    add_message "pg_query.AlterFdwStmt" do
      optional :fdwname, :string, 1
      repeated :func_options, :message, 2, "pg_query.Node"
      repeated :options, :message, 3, "pg_query.Node"
    end
    add_message "pg_query.CreateForeignServerStmt" do
      optional :servername, :string, 1
      optional :servertype, :string, 2
      optional :version, :string, 3
      optional :fdwname, :string, 4
      optional :if_not_exists, :bool, 5
      repeated :options, :message, 6, "pg_query.Node"
    end
    add_message "pg_query.AlterForeignServerStmt" do
      optional :servername, :string, 1
      optional :version, :string, 2
      repeated :options, :message, 3, "pg_query.Node"
      optional :has_version, :bool, 4
    end
    add_message "pg_query.CreateUserMappingStmt" do
      optional :user, :message, 1, "pg_query.RoleSpec"
      optional :servername, :string, 2
      optional :if_not_exists, :bool, 3
      repeated :options, :message, 4, "pg_query.Node"
    end
    add_message "pg_query.AlterUserMappingStmt" do
      optional :user, :message, 1, "pg_query.RoleSpec"
      optional :servername, :string, 2
      repeated :options, :message, 3, "pg_query.Node"
    end
    add_message "pg_query.DropUserMappingStmt" do
      optional :user, :message, 1, "pg_query.RoleSpec"
      optional :servername, :string, 2
      optional :missing_ok, :bool, 3
    end
    add_message "pg_query.AlterTableSpaceOptionsStmt" do
      optional :tablespacename, :string, 1
      repeated :options, :message, 2, "pg_query.Node"
      optional :is_reset, :bool, 3
    end
    add_message "pg_query.AlterTableMoveAllStmt" do
      optional :orig_tablespacename, :string, 1
      optional :objtype, :enum, 2, "pg_query.ObjectType"
      repeated :roles, :message, 3, "pg_query.Node"
      optional :new_tablespacename, :string, 4
      optional :nowait, :bool, 5
    end
    add_message "pg_query.SecLabelStmt" do
      optional :objtype, :enum, 1, "pg_query.ObjectType"
      optional :object, :message, 2, "pg_query.Node"
      optional :provider, :string, 3
      optional :label, :string, 4
    end
    add_message "pg_query.CreateForeignTableStmt" do
      optional :base_stmt, :message, 1, "pg_query.CreateStmt"
      optional :servername, :string, 2
      repeated :options, :message, 3, "pg_query.Node"
    end
    add_message "pg_query.ImportForeignSchemaStmt" do
      optional :server_name, :string, 1
      optional :remote_schema, :string, 2
      optional :local_schema, :string, 3
      optional :list_type, :enum, 4, "pg_query.ImportForeignSchemaType"
      repeated :table_list, :message, 5, "pg_query.Node"
      repeated :options, :message, 6, "pg_query.Node"
    end
    add_message "pg_query.CreateExtensionStmt" do
      optional :extname, :string, 1
      optional :if_not_exists, :bool, 2
      repeated :options, :message, 3, "pg_query.Node"
    end
    add_message "pg_query.AlterExtensionStmt" do
      optional :extname, :string, 1
      repeated :options, :message, 2, "pg_query.Node"
    end
    add_message "pg_query.AlterExtensionContentsStmt" do
      optional :extname, :string, 1
      optional :action, :int32, 2
      optional :objtype, :enum, 3, "pg_query.ObjectType"
      optional :object, :message, 4, "pg_query.Node"
    end
    add_message "pg_query.CreateEventTrigStmt" do
      optional :trigname, :string, 1
      optional :eventname, :string, 2
      repeated :whenclause, :message, 3, "pg_query.Node"
      repeated :funcname, :message, 4, "pg_query.Node"
    end
    add_message "pg_query.AlterEventTrigStmt" do
      optional :trigname, :string, 1
      optional :tgenabled, :string, 2
    end
    add_message "pg_query.RefreshMatViewStmt" do
      optional :concurrent, :bool, 1
      optional :skip_data, :bool, 2
      optional :relation, :message, 3, "pg_query.RangeVar"
    end
    add_message "pg_query.ReplicaIdentityStmt" do
      optional :identity_type, :string, 1
      optional :name, :string, 2
    end
    add_message "pg_query.AlterSystemStmt" do
      optional :setstmt, :message, 1, "pg_query.VariableSetStmt"
    end
    add_message "pg_query.CreatePolicyStmt" do
      optional :policy_name, :string, 1
      optional :table, :message, 2, "pg_query.RangeVar"
      optional :cmd_name, :string, 3
      optional :permissive, :bool, 4
      repeated :roles, :message, 5, "pg_query.Node"
      optional :qual, :message, 6, "pg_query.Node"
      optional :with_check, :message, 7, "pg_query.Node"
    end
    add_message "pg_query.AlterPolicyStmt" do
      optional :policy_name, :string, 1
      optional :table, :message, 2, "pg_query.RangeVar"
      repeated :roles, :message, 3, "pg_query.Node"
      optional :qual, :message, 4, "pg_query.Node"
      optional :with_check, :message, 5, "pg_query.Node"
    end
    add_message "pg_query.CreateTransformStmt" do
      optional :replace, :bool, 1
      optional :type_name, :message, 2, "pg_query.TypeName"
      optional :lang, :string, 3
      optional :fromsql, :message, 4, "pg_query.ObjectWithArgs"
      optional :tosql, :message, 5, "pg_query.ObjectWithArgs"
    end
    add_message "pg_query.CreateAmStmt" do
      optional :amname, :string, 1
      repeated :handler_name, :message, 2, "pg_query.Node"
      optional :amtype, :string, 3
    end
    add_message "pg_query.CreatePublicationStmt" do
      optional :pubname, :string, 1
      repeated :options, :message, 2, "pg_query.Node"
      repeated :tables, :message, 3, "pg_query.Node"
      optional :for_all_tables, :bool, 4
    end
    add_message "pg_query.AlterPublicationStmt" do
      optional :pubname, :string, 1
      repeated :options, :message, 2, "pg_query.Node"
      repeated :tables, :message, 3, "pg_query.Node"
      optional :for_all_tables, :bool, 4
      optional :table_action, :enum, 5, "pg_query.DefElemAction"
    end
    add_message "pg_query.CreateSubscriptionStmt" do
      optional :subname, :string, 1
      optional :conninfo, :string, 2
      repeated :publication, :message, 3, "pg_query.Node"
      repeated :options, :message, 4, "pg_query.Node"
    end
    add_message "pg_query.AlterSubscriptionStmt" do
      optional :kind, :enum, 1, "pg_query.AlterSubscriptionType"
      optional :subname, :string, 2
      optional :conninfo, :string, 3
      repeated :publication, :message, 4, "pg_query.Node"
      repeated :options, :message, 5, "pg_query.Node"
    end
    add_message "pg_query.DropSubscriptionStmt" do
      optional :subname, :string, 1
      optional :missing_ok, :bool, 2
      optional :behavior, :enum, 3, "pg_query.DropBehavior"
    end
    add_message "pg_query.CreateStatsStmt" do
      repeated :defnames, :message, 1, "pg_query.Node"
      repeated :stat_types, :message, 2, "pg_query.Node"
      repeated :exprs, :message, 3, "pg_query.Node"
      repeated :relations, :message, 4, "pg_query.Node"
      optional :stxcomment, :string, 5
      optional :if_not_exists, :bool, 6
    end
    add_message "pg_query.AlterCollationStmt" do
      repeated :collname, :message, 1, "pg_query.Node"
    end
    add_message "pg_query.CallStmt" do
      optional :funccall, :message, 1, "pg_query.FuncCall"
      optional :funcexpr, :message, 2, "pg_query.FuncExpr"
    end
    add_message "pg_query.AlterStatsStmt" do
      repeated :defnames, :message, 1, "pg_query.Node"
      optional :stxstattarget, :int32, 2
      optional :missing_ok, :bool, 3
    end
    add_message "pg_query.A_Expr" do
      optional :kind, :enum, 1, "pg_query.A_Expr_Kind"
      repeated :name, :message, 2, "pg_query.Node"
      optional :lexpr, :message, 3, "pg_query.Node"
      optional :rexpr, :message, 4, "pg_query.Node"
      optional :location, :int32, 5
    end
    add_message "pg_query.ColumnRef" do
      repeated :fields, :message, 1, "pg_query.Node"
      optional :location, :int32, 2
    end
    add_message "pg_query.ParamRef" do
      optional :number, :int32, 1
      optional :location, :int32, 2
    end
    add_message "pg_query.A_Const" do
      optional :val, :message, 1, "pg_query.Node"
      optional :location, :int32, 2
    end
    add_message "pg_query.FuncCall" do
      repeated :funcname, :message, 1, "pg_query.Node"
      repeated :args, :message, 2, "pg_query.Node"
      repeated :agg_order, :message, 3, "pg_query.Node"
      optional :agg_filter, :message, 4, "pg_query.Node"
      optional :agg_within_group, :bool, 5
      optional :agg_star, :bool, 6
      optional :agg_distinct, :bool, 7
      optional :func_variadic, :bool, 8
      optional :over, :message, 9, "pg_query.WindowDef"
      optional :location, :int32, 10
    end
    add_message "pg_query.A_Star" do
    end
    add_message "pg_query.A_Indices" do
      optional :is_slice, :bool, 1
      optional :lidx, :message, 2, "pg_query.Node"
      optional :uidx, :message, 3, "pg_query.Node"
    end
    add_message "pg_query.A_Indirection" do
      optional :arg, :message, 1, "pg_query.Node"
      repeated :indirection, :message, 2, "pg_query.Node"
    end
    add_message "pg_query.A_ArrayExpr" do
      repeated :elements, :message, 1, "pg_query.Node"
      optional :location, :int32, 2
    end
    add_message "pg_query.ResTarget" do
      optional :name, :string, 1
      repeated :indirection, :message, 2, "pg_query.Node"
      optional :val, :message, 3, "pg_query.Node"
      optional :location, :int32, 4
    end
    add_message "pg_query.MultiAssignRef" do
      optional :source, :message, 1, "pg_query.Node"
      optional :colno, :int32, 2
      optional :ncolumns, :int32, 3
    end
    add_message "pg_query.TypeCast" do
      optional :arg, :message, 1, "pg_query.Node"
      optional :type_name, :message, 2, "pg_query.TypeName"
      optional :location, :int32, 3
    end
    add_message "pg_query.CollateClause" do
      optional :arg, :message, 1, "pg_query.Node"
      repeated :collname, :message, 2, "pg_query.Node"
      optional :location, :int32, 3
    end
    add_message "pg_query.SortBy" do
      optional :node, :message, 1, "pg_query.Node"
      optional :sortby_dir, :enum, 2, "pg_query.SortByDir"
      optional :sortby_nulls, :enum, 3, "pg_query.SortByNulls"
      repeated :use_op, :message, 4, "pg_query.Node"
      optional :location, :int32, 5
    end
    add_message "pg_query.WindowDef" do
      optional :name, :string, 1
      optional :refname, :string, 2
      repeated :partition_clause, :message, 3, "pg_query.Node"
      repeated :order_clause, :message, 4, "pg_query.Node"
      optional :frame_options, :int32, 5
      optional :start_offset, :message, 6, "pg_query.Node"
      optional :end_offset, :message, 7, "pg_query.Node"
      optional :location, :int32, 8
    end
    add_message "pg_query.RangeSubselect" do
      optional :lateral, :bool, 1
      optional :subquery, :message, 2, "pg_query.Node"
      optional :alias, :message, 3, "pg_query.Alias"
    end
    add_message "pg_query.RangeFunction" do
      optional :lateral, :bool, 1
      optional :ordinality, :bool, 2
      optional :is_rowsfrom, :bool, 3
      repeated :functions, :message, 4, "pg_query.Node"
      optional :alias, :message, 5, "pg_query.Alias"
      repeated :coldeflist, :message, 6, "pg_query.Node"
    end
    add_message "pg_query.RangeTableSample" do
      optional :relation, :message, 1, "pg_query.Node"
      repeated :method, :message, 2, "pg_query.Node"
      repeated :args, :message, 3, "pg_query.Node"
      optional :repeatable, :message, 4, "pg_query.Node"
      optional :location, :int32, 5
    end
    add_message "pg_query.RangeTableFunc" do
      optional :lateral, :bool, 1
      optional :docexpr, :message, 2, "pg_query.Node"
      optional :rowexpr, :message, 3, "pg_query.Node"
      repeated :namespaces, :message, 4, "pg_query.Node"
      repeated :columns, :message, 5, "pg_query.Node"
      optional :alias, :message, 6, "pg_query.Alias"
      optional :location, :int32, 7
    end
    add_message "pg_query.RangeTableFuncCol" do
      optional :colname, :string, 1
      optional :type_name, :message, 2, "pg_query.TypeName"
      optional :for_ordinality, :bool, 3
      optional :is_not_null, :bool, 4
      optional :colexpr, :message, 5, "pg_query.Node"
      optional :coldefexpr, :message, 6, "pg_query.Node"
      optional :location, :int32, 7
    end
    add_message "pg_query.TypeName" do
      repeated :names, :message, 1, "pg_query.Node"
      optional :type_oid, :uint32, 2
      optional :setof, :bool, 3
      optional :pct_type, :bool, 4
      repeated :typmods, :message, 5, "pg_query.Node"
      optional :typemod, :int32, 6
      repeated :array_bounds, :message, 7, "pg_query.Node"
      optional :location, :int32, 8
    end
    add_message "pg_query.ColumnDef" do
      optional :colname, :string, 1
      optional :type_name, :message, 2, "pg_query.TypeName"
      optional :inhcount, :int32, 3
      optional :is_local, :bool, 4
      optional :is_not_null, :bool, 5
      optional :is_from_type, :bool, 6
      optional :storage, :string, 7
      optional :raw_default, :message, 8, "pg_query.Node"
      optional :cooked_default, :message, 9, "pg_query.Node"
      optional :identity, :string, 10
      optional :identity_sequence, :message, 11, "pg_query.RangeVar"
      optional :generated, :string, 12
      optional :coll_clause, :message, 13, "pg_query.CollateClause"
      optional :coll_oid, :uint32, 14
      repeated :constraints, :message, 15, "pg_query.Node"
      repeated :fdwoptions, :message, 16, "pg_query.Node"
      optional :location, :int32, 17
    end
    add_message "pg_query.IndexElem" do
      optional :name, :string, 1
      optional :expr, :message, 2, "pg_query.Node"
      optional :indexcolname, :string, 3
      repeated :collation, :message, 4, "pg_query.Node"
      repeated :opclass, :message, 5, "pg_query.Node"
      repeated :opclassopts, :message, 6, "pg_query.Node"
      optional :ordering, :enum, 7, "pg_query.SortByDir"
      optional :nulls_ordering, :enum, 8, "pg_query.SortByNulls"
    end
    add_message "pg_query.Constraint" do
      optional :contype, :enum, 1, "pg_query.ConstrType"
      optional :conname, :string, 2
      optional :deferrable, :bool, 3
      optional :initdeferred, :bool, 4
      optional :location, :int32, 5
      optional :is_no_inherit, :bool, 6
      optional :raw_expr, :message, 7, "pg_query.Node"
      optional :cooked_expr, :string, 8
      optional :generated_when, :string, 9
      repeated :keys, :message, 10, "pg_query.Node"
      repeated :including, :message, 11, "pg_query.Node"
      repeated :exclusions, :message, 12, "pg_query.Node"
      repeated :options, :message, 13, "pg_query.Node"
      optional :indexname, :string, 14
      optional :indexspace, :string, 15
      optional :reset_default_tblspc, :bool, 16
      optional :access_method, :string, 17
      optional :where_clause, :message, 18, "pg_query.Node"
      optional :pktable, :message, 19, "pg_query.RangeVar"
      repeated :fk_attrs, :message, 20, "pg_query.Node"
      repeated :pk_attrs, :message, 21, "pg_query.Node"
      optional :fk_matchtype, :string, 22
      optional :fk_upd_action, :string, 23
      optional :fk_del_action, :string, 24
      repeated :old_conpfeqop, :message, 25, "pg_query.Node"
      optional :old_pktable_oid, :uint32, 26
      optional :skip_validation, :bool, 27
      optional :initially_valid, :bool, 28
    end
    add_message "pg_query.DefElem" do
      optional :defnamespace, :string, 1
      optional :defname, :string, 2
      optional :arg, :message, 3, "pg_query.Node"
      optional :defaction, :enum, 4, "pg_query.DefElemAction"
      optional :location, :int32, 5
    end
    add_message "pg_query.RangeTblEntry" do
      optional :rtekind, :enum, 1, "pg_query.RTEKind"
      optional :relid, :uint32, 2
      optional :relkind, :string, 3
      optional :rellockmode, :int32, 4
      optional :tablesample, :message, 5, "pg_query.TableSampleClause"
      optional :subquery, :message, 6, "pg_query.Query"
      optional :security_barrier, :bool, 7
      optional :jointype, :enum, 8, "pg_query.JoinType"
      optional :joinmergedcols, :int32, 9
      repeated :joinaliasvars, :message, 10, "pg_query.Node"
      repeated :joinleftcols, :message, 11, "pg_query.Node"
      repeated :joinrightcols, :message, 12, "pg_query.Node"
      repeated :functions, :message, 13, "pg_query.Node"
      optional :funcordinality, :bool, 14
      optional :tablefunc, :message, 15, "pg_query.TableFunc"
      repeated :values_lists, :message, 16, "pg_query.Node"
      optional :ctename, :string, 17
      optional :ctelevelsup, :uint32, 18
      optional :self_reference, :bool, 19
      repeated :coltypes, :message, 20, "pg_query.Node"
      repeated :coltypmods, :message, 21, "pg_query.Node"
      repeated :colcollations, :message, 22, "pg_query.Node"
      optional :enrname, :string, 23
      optional :enrtuples, :double, 24
      optional :alias, :message, 25, "pg_query.Alias"
      optional :eref, :message, 26, "pg_query.Alias"
      optional :lateral, :bool, 27
      optional :inh, :bool, 28
      optional :in_from_cl, :bool, 29
      optional :required_perms, :uint32, 30
      optional :check_as_user, :uint32, 31
      repeated :security_quals, :message, 32, "pg_query.Node"
    end
    add_message "pg_query.RangeTblFunction" do
      optional :funcexpr, :message, 1, "pg_query.Node"
      optional :funccolcount, :int32, 2
      repeated :funccolnames, :message, 3, "pg_query.Node"
      repeated :funccoltypes, :message, 4, "pg_query.Node"
      repeated :funccoltypmods, :message, 5, "pg_query.Node"
      repeated :funccolcollations, :message, 6, "pg_query.Node"
    end
    add_message "pg_query.TableSampleClause" do
      optional :tsmhandler, :uint32, 1
      repeated :args, :message, 2, "pg_query.Node"
      optional :repeatable, :message, 3, "pg_query.Node"
    end
    add_message "pg_query.WithCheckOption" do
      optional :kind, :enum, 1, "pg_query.WCOKind"
      optional :relname, :string, 2
      optional :polname, :string, 3
      optional :qual, :message, 4, "pg_query.Node"
      optional :cascaded, :bool, 5
    end
    add_message "pg_query.SortGroupClause" do
      optional :tle_sort_group_ref, :uint32, 1
      optional :eqop, :uint32, 2
      optional :sortop, :uint32, 3
      optional :nulls_first, :bool, 4
      optional :hashable, :bool, 5
    end
    add_message "pg_query.GroupingSet" do
      optional :kind, :enum, 1, "pg_query.GroupingSetKind"
      repeated :content, :message, 2, "pg_query.Node"
      optional :location, :int32, 3
    end
    add_message "pg_query.WindowClause" do
      optional :name, :string, 1
      optional :refname, :string, 2
      repeated :partition_clause, :message, 3, "pg_query.Node"
      repeated :order_clause, :message, 4, "pg_query.Node"
      optional :frame_options, :int32, 5
      optional :start_offset, :message, 6, "pg_query.Node"
      optional :end_offset, :message, 7, "pg_query.Node"
      optional :start_in_range_func, :uint32, 8
      optional :end_in_range_func, :uint32, 9
      optional :in_range_coll, :uint32, 10
      optional :in_range_asc, :bool, 11
      optional :in_range_nulls_first, :bool, 12
      optional :winref, :uint32, 13
      optional :copied_order, :bool, 14
    end
    add_message "pg_query.ObjectWithArgs" do
      repeated :objname, :message, 1, "pg_query.Node"
      repeated :objargs, :message, 2, "pg_query.Node"
      optional :args_unspecified, :bool, 3
    end
    add_message "pg_query.AccessPriv" do
      optional :priv_name, :string, 1
      repeated :cols, :message, 2, "pg_query.Node"
    end
    add_message "pg_query.CreateOpClassItem" do
      optional :itemtype, :int32, 1
      optional :name, :message, 2, "pg_query.ObjectWithArgs"
      optional :number, :int32, 3
      repeated :order_family, :message, 4, "pg_query.Node"
      repeated :class_args, :message, 5, "pg_query.Node"
      optional :storedtype, :message, 6, "pg_query.TypeName"
    end
    add_message "pg_query.TableLikeClause" do
      optional :relation, :message, 1, "pg_query.RangeVar"
      optional :options, :uint32, 2
    end
    add_message "pg_query.FunctionParameter" do
      optional :name, :string, 1
      optional :arg_type, :message, 2, "pg_query.TypeName"
      optional :mode, :enum, 3, "pg_query.FunctionParameterMode"
      optional :defexpr, :message, 4, "pg_query.Node"
    end
    add_message "pg_query.LockingClause" do
      repeated :locked_rels, :message, 1, "pg_query.Node"
      optional :strength, :enum, 2, "pg_query.LockClauseStrength"
      optional :wait_policy, :enum, 3, "pg_query.LockWaitPolicy"
    end
    add_message "pg_query.RowMarkClause" do
      optional :rti, :uint32, 1
      optional :strength, :enum, 2, "pg_query.LockClauseStrength"
      optional :wait_policy, :enum, 3, "pg_query.LockWaitPolicy"
      optional :pushed_down, :bool, 4
    end
    add_message "pg_query.XmlSerialize" do
      optional :xmloption, :enum, 1, "pg_query.XmlOptionType"
      optional :expr, :message, 2, "pg_query.Node"
      optional :type_name, :message, 3, "pg_query.TypeName"
      optional :location, :int32, 4
    end
    add_message "pg_query.WithClause" do
      repeated :ctes, :message, 1, "pg_query.Node"
      optional :recursive, :bool, 2
      optional :location, :int32, 3
    end
    add_message "pg_query.InferClause" do
      repeated :index_elems, :message, 1, "pg_query.Node"
      optional :where_clause, :message, 2, "pg_query.Node"
      optional :conname, :string, 3
      optional :location, :int32, 4
    end
    add_message "pg_query.OnConflictClause" do
      optional :action, :enum, 1, "pg_query.OnConflictAction"
      optional :infer, :message, 2, "pg_query.InferClause"
      repeated :target_list, :message, 3, "pg_query.Node"
      optional :where_clause, :message, 4, "pg_query.Node"
      optional :location, :int32, 5
    end
    add_message "pg_query.CommonTableExpr" do
      optional :ctename, :string, 1
      repeated :aliascolnames, :message, 2, "pg_query.Node"
      optional :ctematerialized, :enum, 3, "pg_query.CTEMaterialize"
      optional :ctequery, :message, 4, "pg_query.Node"
      optional :location, :int32, 5
      optional :cterecursive, :bool, 6
      optional :cterefcount, :int32, 7
      repeated :ctecolnames, :message, 8, "pg_query.Node"
      repeated :ctecoltypes, :message, 9, "pg_query.Node"
      repeated :ctecoltypmods, :message, 10, "pg_query.Node"
      repeated :ctecolcollations, :message, 11, "pg_query.Node"
    end
    add_message "pg_query.RoleSpec" do
      optional :roletype, :enum, 1, "pg_query.RoleSpecType"
      optional :rolename, :string, 2
      optional :location, :int32, 3
    end
    add_message "pg_query.TriggerTransition" do
      optional :name, :string, 1
      optional :is_new, :bool, 2
      optional :is_table, :bool, 3
    end
    add_message "pg_query.PartitionElem" do
      optional :name, :string, 1
      optional :expr, :message, 2, "pg_query.Node"
      repeated :collation, :message, 3, "pg_query.Node"
      repeated :opclass, :message, 4, "pg_query.Node"
      optional :location, :int32, 5
    end
    add_message "pg_query.PartitionSpec" do
      optional :strategy, :string, 1
      repeated :part_params, :message, 2, "pg_query.Node"
      optional :location, :int32, 3
    end
    add_message "pg_query.PartitionBoundSpec" do
      optional :strategy, :string, 1
      optional :is_default, :bool, 2
      optional :modulus, :int32, 3
      optional :remainder, :int32, 4
      repeated :listdatums, :message, 5, "pg_query.Node"
      repeated :lowerdatums, :message, 6, "pg_query.Node"
      repeated :upperdatums, :message, 7, "pg_query.Node"
      optional :location, :int32, 8
    end
    add_message "pg_query.PartitionRangeDatum" do
      optional :kind, :enum, 1, "pg_query.PartitionRangeDatumKind"
      optional :value, :message, 2, "pg_query.Node"
      optional :location, :int32, 3
    end
    add_message "pg_query.PartitionCmd" do
      optional :name, :message, 1, "pg_query.RangeVar"
      optional :bound, :message, 2, "pg_query.PartitionBoundSpec"
    end
    add_message "pg_query.VacuumRelation" do
      optional :relation, :message, 1, "pg_query.RangeVar"
      optional :oid, :uint32, 2
      repeated :va_cols, :message, 3, "pg_query.Node"
    end
    add_message "pg_query.InlineCodeBlock" do
      optional :source_text, :string, 1
      optional :lang_oid, :uint32, 2
      optional :lang_is_trusted, :bool, 3
      optional :atomic, :bool, 4
    end
    add_message "pg_query.CallContext" do
      optional :atomic, :bool, 1
    end
    add_enum "pg_query.OverridingKind" do
      value :OVERRIDING_NOT_SET, 0
      value :OVERRIDING_USER_VALUE, 1
      value :OVERRIDING_SYSTEM_VALUE, 2
    end
    add_enum "pg_query.QuerySource" do
      value :QSRC_ORIGINAL, 0
      value :QSRC_PARSER, 1
      value :QSRC_INSTEAD_RULE, 2
      value :QSRC_QUAL_INSTEAD_RULE, 3
      value :QSRC_NON_INSTEAD_RULE, 4
    end
    add_enum "pg_query.SortByDir" do
      value :SORTBY_DEFAULT, 0
      value :SORTBY_ASC, 1
      value :SORTBY_DESC, 2
      value :SORTBY_USING, 3
    end
    add_enum "pg_query.SortByNulls" do
      value :SORTBY_NULLS_DEFAULT, 0
      value :SORTBY_NULLS_FIRST, 1
      value :SORTBY_NULLS_LAST, 2
    end
    add_enum "pg_query.A_Expr_Kind" do
      value :AEXPR_OP, 0
      value :AEXPR_OP_ANY, 1
      value :AEXPR_OP_ALL, 2
      value :AEXPR_DISTINCT, 3
      value :AEXPR_NOT_DISTINCT, 4
      value :AEXPR_NULLIF, 5
      value :AEXPR_OF, 6
      value :AEXPR_IN, 7
      value :AEXPR_LIKE, 8
      value :AEXPR_ILIKE, 9
      value :AEXPR_SIMILAR, 10
      value :AEXPR_BETWEEN, 11
      value :AEXPR_NOT_BETWEEN, 12
      value :AEXPR_BETWEEN_SYM, 13
      value :AEXPR_NOT_BETWEEN_SYM, 14
      value :AEXPR_PAREN, 15
    end
    add_enum "pg_query.RoleSpecType" do
      value :ROLESPEC_CSTRING, 0
      value :ROLESPEC_CURRENT_USER, 1
      value :ROLESPEC_SESSION_USER, 2
      value :ROLESPEC_PUBLIC, 3
    end
    add_enum "pg_query.TableLikeOption" do
      value :CREATE_TABLE_LIKE_COMMENTS, 0
      value :CREATE_TABLE_LIKE_CONSTRAINTS, 1
      value :CREATE_TABLE_LIKE_DEFAULTS, 2
      value :CREATE_TABLE_LIKE_GENERATED, 3
      value :CREATE_TABLE_LIKE_IDENTITY, 4
      value :CREATE_TABLE_LIKE_INDEXES, 5
      value :CREATE_TABLE_LIKE_STATISTICS, 6
      value :CREATE_TABLE_LIKE_STORAGE, 7
      value :CREATE_TABLE_LIKE_ALL, 8
    end
    add_enum "pg_query.DefElemAction" do
      value :DEFELEM_UNSPEC, 0
      value :DEFELEM_SET, 1
      value :DEFELEM_ADD, 2
      value :DEFELEM_DROP, 3
    end
    add_enum "pg_query.PartitionRangeDatumKind" do
      value :PARTITION_RANGE_DATUM_MINVALUE, 0
      value :PARTITION_RANGE_DATUM_VALUE, 1
      value :PARTITION_RANGE_DATUM_MAXVALUE, 2
    end
    add_enum "pg_query.RTEKind" do
      value :RTE_RELATION, 0
      value :RTE_SUBQUERY, 1
      value :RTE_JOIN, 2
      value :RTE_FUNCTION, 3
      value :RTE_TABLEFUNC, 4
      value :RTE_VALUES, 5
      value :RTE_CTE, 6
      value :RTE_NAMEDTUPLESTORE, 7
      value :RTE_RESULT, 8
    end
    add_enum "pg_query.WCOKind" do
      value :WCO_VIEW_CHECK, 0
      value :WCO_RLS_INSERT_CHECK, 1
      value :WCO_RLS_UPDATE_CHECK, 2
      value :WCO_RLS_CONFLICT_CHECK, 3
    end
    add_enum "pg_query.GroupingSetKind" do
      value :GROUPING_SET_EMPTY, 0
      value :GROUPING_SET_SIMPLE, 1
      value :GROUPING_SET_ROLLUP, 2
      value :GROUPING_SET_CUBE, 3
      value :GROUPING_SET_SETS, 4
    end
    add_enum "pg_query.CTEMaterialize" do
      value :CTEMaterializeDefault, 0
      value :CTEMaterializeAlways, 1
      value :CTEMaterializeNever, 2
    end
    add_enum "pg_query.SetOperation" do
      value :SETOP_NONE, 0
      value :SETOP_UNION, 1
      value :SETOP_INTERSECT, 2
      value :SETOP_EXCEPT, 3
    end
    add_enum "pg_query.ObjectType" do
      value :OBJECT_ACCESS_METHOD, 0
      value :OBJECT_AGGREGATE, 1
      value :OBJECT_AMOP, 2
      value :OBJECT_AMPROC, 3
      value :OBJECT_ATTRIBUTE, 4
      value :OBJECT_CAST, 5
      value :OBJECT_COLUMN, 6
      value :OBJECT_COLLATION, 7
      value :OBJECT_CONVERSION, 8
      value :OBJECT_DATABASE, 9
      value :OBJECT_DEFAULT, 10
      value :OBJECT_DEFACL, 11
      value :OBJECT_DOMAIN, 12
      value :OBJECT_DOMCONSTRAINT, 13
      value :OBJECT_EVENT_TRIGGER, 14
      value :OBJECT_EXTENSION, 15
      value :OBJECT_FDW, 16
      value :OBJECT_FOREIGN_SERVER, 17
      value :OBJECT_FOREIGN_TABLE, 18
      value :OBJECT_FUNCTION, 19
      value :OBJECT_INDEX, 20
      value :OBJECT_LANGUAGE, 21
      value :OBJECT_LARGEOBJECT, 22
      value :OBJECT_MATVIEW, 23
      value :OBJECT_OPCLASS, 24
      value :OBJECT_OPERATOR, 25
      value :OBJECT_OPFAMILY, 26
      value :OBJECT_POLICY, 27
      value :OBJECT_PROCEDURE, 28
      value :OBJECT_PUBLICATION, 29
      value :OBJECT_PUBLICATION_REL, 30
      value :OBJECT_ROLE, 31
      value :OBJECT_ROUTINE, 32
      value :OBJECT_RULE, 33
      value :OBJECT_SCHEMA, 34
      value :OBJECT_SEQUENCE, 35
      value :OBJECT_SUBSCRIPTION, 36
      value :OBJECT_STATISTIC_EXT, 37
      value :OBJECT_TABCONSTRAINT, 38
      value :OBJECT_TABLE, 39
      value :OBJECT_TABLESPACE, 40
      value :OBJECT_TRANSFORM, 41
      value :OBJECT_TRIGGER, 42
      value :OBJECT_TSCONFIGURATION, 43
      value :OBJECT_TSDICTIONARY, 44
      value :OBJECT_TSPARSER, 45
      value :OBJECT_TSTEMPLATE, 46
      value :OBJECT_TYPE, 47
      value :OBJECT_USER_MAPPING, 48
      value :OBJECT_VIEW, 49
    end
    add_enum "pg_query.DropBehavior" do
      value :DROP_RESTRICT, 0
      value :DROP_CASCADE, 1
    end
    add_enum "pg_query.AlterTableType" do
      value :AT_AddColumn, 0
      value :AT_AddColumnRecurse, 1
      value :AT_AddColumnToView, 2
      value :AT_ColumnDefault, 3
      value :AT_CookedColumnDefault, 4
      value :AT_DropNotNull, 5
      value :AT_SetNotNull, 6
      value :AT_DropExpression, 7
      value :AT_CheckNotNull, 8
      value :AT_SetStatistics, 9
      value :AT_SetOptions, 10
      value :AT_ResetOptions, 11
      value :AT_SetStorage, 12
      value :AT_DropColumn, 13
      value :AT_DropColumnRecurse, 14
      value :AT_AddIndex, 15
      value :AT_ReAddIndex, 16
      value :AT_AddConstraint, 17
      value :AT_AddConstraintRecurse, 18
      value :AT_ReAddConstraint, 19
      value :AT_ReAddDomainConstraint, 20
      value :AT_AlterConstraint, 21
      value :AT_ValidateConstraint, 22
      value :AT_ValidateConstraintRecurse, 23
      value :AT_AddIndexConstraint, 24
      value :AT_DropConstraint, 25
      value :AT_DropConstraintRecurse, 26
      value :AT_ReAddComment, 27
      value :AT_AlterColumnType, 28
      value :AT_AlterColumnGenericOptions, 29
      value :AT_ChangeOwner, 30
      value :AT_ClusterOn, 31
      value :AT_DropCluster, 32
      value :AT_SetLogged, 33
      value :AT_SetUnLogged, 34
      value :AT_DropOids, 35
      value :AT_SetTableSpace, 36
      value :AT_SetRelOptions, 37
      value :AT_ResetRelOptions, 38
      value :AT_ReplaceRelOptions, 39
      value :AT_EnableTrig, 40
      value :AT_EnableAlwaysTrig, 41
      value :AT_EnableReplicaTrig, 42
      value :AT_DisableTrig, 43
      value :AT_EnableTrigAll, 44
      value :AT_DisableTrigAll, 45
      value :AT_EnableTrigUser, 46
      value :AT_DisableTrigUser, 47
      value :AT_EnableRule, 48
      value :AT_EnableAlwaysRule, 49
      value :AT_EnableReplicaRule, 50
      value :AT_DisableRule, 51
      value :AT_AddInherit, 52
      value :AT_DropInherit, 53
      value :AT_AddOf, 54
      value :AT_DropOf, 55
      value :AT_ReplicaIdentity, 56
      value :AT_EnableRowSecurity, 57
      value :AT_DisableRowSecurity, 58
      value :AT_ForceRowSecurity, 59
      value :AT_NoForceRowSecurity, 60
      value :AT_GenericOptions, 61
      value :AT_AttachPartition, 62
      value :AT_DetachPartition, 63
      value :AT_AddIdentity, 64
      value :AT_SetIdentity, 65
      value :AT_DropIdentity, 66
    end
    add_enum "pg_query.GrantTargetType" do
      value :ACL_TARGET_OBJECT, 0
      value :ACL_TARGET_ALL_IN_SCHEMA, 1
      value :ACL_TARGET_DEFAULTS, 2
    end
    add_enum "pg_query.VariableSetKind" do
      value :VAR_SET_VALUE, 0
      value :VAR_SET_DEFAULT, 1
      value :VAR_SET_CURRENT, 2
      value :VAR_SET_MULTI, 3
      value :VAR_RESET, 4
      value :VAR_RESET_ALL, 5
    end
    add_enum "pg_query.ConstrType" do
      value :CONSTR_NULL, 0
      value :CONSTR_NOTNULL, 1
      value :CONSTR_DEFAULT, 2
      value :CONSTR_IDENTITY, 3
      value :CONSTR_GENERATED, 4
      value :CONSTR_CHECK, 5
      value :CONSTR_PRIMARY, 6
      value :CONSTR_UNIQUE, 7
      value :CONSTR_EXCLUSION, 8
      value :CONSTR_FOREIGN, 9
      value :CONSTR_ATTR_DEFERRABLE, 10
      value :CONSTR_ATTR_NOT_DEFERRABLE, 11
      value :CONSTR_ATTR_DEFERRED, 12
      value :CONSTR_ATTR_IMMEDIATE, 13
    end
    add_enum "pg_query.ImportForeignSchemaType" do
      value :FDW_IMPORT_SCHEMA_ALL, 0
      value :FDW_IMPORT_SCHEMA_LIMIT_TO, 1
      value :FDW_IMPORT_SCHEMA_EXCEPT, 2
    end
    add_enum "pg_query.RoleStmtType" do
      value :ROLESTMT_ROLE, 0
      value :ROLESTMT_USER, 1
      value :ROLESTMT_GROUP, 2
    end
    add_enum "pg_query.FetchDirection" do
      value :FETCH_FORWARD, 0
      value :FETCH_BACKWARD, 1
      value :FETCH_ABSOLUTE, 2
      value :FETCH_RELATIVE, 3
    end
    add_enum "pg_query.FunctionParameterMode" do
      value :FUNC_PARAM_IN, 0
      value :FUNC_PARAM_OUT, 1
      value :FUNC_PARAM_INOUT, 2
      value :FUNC_PARAM_VARIADIC, 3
      value :FUNC_PARAM_TABLE, 4
    end
    add_enum "pg_query.TransactionStmtKind" do
      value :TRANS_STMT_BEGIN, 0
      value :TRANS_STMT_START, 1
      value :TRANS_STMT_COMMIT, 2
      value :TRANS_STMT_ROLLBACK, 3
      value :TRANS_STMT_SAVEPOINT, 4
      value :TRANS_STMT_RELEASE, 5
      value :TRANS_STMT_ROLLBACK_TO, 6
      value :TRANS_STMT_PREPARE, 7
      value :TRANS_STMT_COMMIT_PREPARED, 8
      value :TRANS_STMT_ROLLBACK_PREPARED, 9
    end
    add_enum "pg_query.ViewCheckOption" do
      value :NO_CHECK_OPTION, 0
      value :LOCAL_CHECK_OPTION, 1
      value :CASCADED_CHECK_OPTION, 2
    end
    add_enum "pg_query.ClusterOption" do
      value :CLUOPT_RECHECK, 0
      value :CLUOPT_VERBOSE, 1
    end
    add_enum "pg_query.DiscardMode" do
      value :DISCARD_ALL, 0
      value :DISCARD_PLANS, 1
      value :DISCARD_SEQUENCES, 2
      value :DISCARD_TEMP, 3
    end
    add_enum "pg_query.ReindexObjectType" do
      value :REINDEX_OBJECT_INDEX, 0
      value :REINDEX_OBJECT_TABLE, 1
      value :REINDEX_OBJECT_SCHEMA, 2
      value :REINDEX_OBJECT_SYSTEM, 3
      value :REINDEX_OBJECT_DATABASE, 4
    end
    add_enum "pg_query.AlterTSConfigType" do
      value :ALTER_TSCONFIG_ADD_MAPPING, 0
      value :ALTER_TSCONFIG_ALTER_MAPPING_FOR_TOKEN, 1
      value :ALTER_TSCONFIG_REPLACE_DICT, 2
      value :ALTER_TSCONFIG_REPLACE_DICT_FOR_TOKEN, 3
      value :ALTER_TSCONFIG_DROP_MAPPING, 4
    end
    add_enum "pg_query.AlterSubscriptionType" do
      value :ALTER_SUBSCRIPTION_OPTIONS, 0
      value :ALTER_SUBSCRIPTION_CONNECTION, 1
      value :ALTER_SUBSCRIPTION_PUBLICATION, 2
      value :ALTER_SUBSCRIPTION_REFRESH, 3
      value :ALTER_SUBSCRIPTION_ENABLED, 4
    end
    add_enum "pg_query.OnCommitAction" do
      value :ONCOMMIT_NOOP, 0
      value :ONCOMMIT_PRESERVE_ROWS, 1
      value :ONCOMMIT_DELETE_ROWS, 2
      value :ONCOMMIT_DROP, 3
    end
    add_enum "pg_query.ParamKind" do
      value :PARAM_EXTERN, 0
      value :PARAM_EXEC, 1
      value :PARAM_SUBLINK, 2
      value :PARAM_MULTIEXPR, 3
    end
    add_enum "pg_query.CoercionContext" do
      value :COERCION_IMPLICIT, 0
      value :COERCION_ASSIGNMENT, 1
      value :COERCION_EXPLICIT, 2
    end
    add_enum "pg_query.CoercionForm" do
      value :COERCE_EXPLICIT_CALL, 0
      value :COERCE_EXPLICIT_CAST, 1
      value :COERCE_IMPLICIT_CAST, 2
    end
    add_enum "pg_query.BoolExprType" do
      value :AND_EXPR, 0
      value :OR_EXPR, 1
    end
    add_enum "pg_query.SubLinkType" do
      value :EXISTS_SUBLINK, 0
      value :ALL_SUBLINK, 1
      value :ANY_SUBLINK, 2
      value :ROWCOMPARE_SUBLINK, 3
      value :EXPR_SUBLINK, 4
      value :MULTIEXPR_SUBLINK, 5
      value :ARRAY_SUBLINK, 6
      value :CTE_SUBLINK, 7
    end
    add_enum "pg_query.RowCompareType" do
      value :ROWCOMPARE_LT, 0
      value :ROWCOMPARE_LE, 1
      value :ROWCOMPARE_EQ, 2
      value :ROWCOMPARE_GE, 3
      value :ROWCOMPARE_GT, 4
      value :ROWCOMPARE_NE, 5
    end
    add_enum "pg_query.MinMaxOp" do
      value :IS_GREATEST, 0
      value :IS_LEAST, 1
    end
    add_enum "pg_query.SQLValueFunctionOp" do
      value :SVFOP_CURRENT_DATE, 0
      value :SVFOP_CURRENT_TIME, 1
      value :SVFOP_CURRENT_TIME_N, 2
      value :SVFOP_CURRENT_TIMESTAMP, 3
      value :SVFOP_CURRENT_TIMESTAMP_N, 4
      value :SVFOP_LOCALTIME, 5
      value :SVFOP_LOCALTIME_N, 6
      value :SVFOP_LOCALTIMESTAMP, 7
      value :SVFOP_LOCALTIMESTAMP_N, 8
      value :SVFOP_CURRENT_ROLE, 9
      value :SVFOP_CURRENT_USER, 10
      value :SVFOP_USER, 11
      value :SVFOP_SESSION_USER, 12
      value :SVFOP_CURRENT_CATALOG, 13
      value :SVFOP_CURRENT_SCHEMA, 14
    end
    add_enum "pg_query.XmlExprOp" do
      value :IS_XMLCONCAT, 0
      value :IS_XMLELEMENT, 1
      value :IS_XMLFOREST, 2
      value :IS_XMLPARSE, 3
      value :IS_XMLPI, 4
      value :IS_XMLROOT, 5
      value :IS_XMLSERIALIZE, 6
      value :IS_DOCUMENT, 7
    end
    add_enum "pg_query.XmlOptionType" do
      value :XMLOPTION_DOCUMENT, 0
      value :XMLOPTION_CONTENT, 1
    end
    add_enum "pg_query.NullTestType" do
      value :IS_NULL, 0
      value :IS_NOT_NULL, 1
    end
    add_enum "pg_query.BoolTestType" do
      value :IS_TRUE, 0
      value :IS_NOT_TRUE, 1
    end
    add_enum "pg_query.CmdType" do
      value :CMD_UNKNOWN, 0
      value :CMD_SELECT, 1
      value :CMD_UPDATE, 2
      value :CMD_INSERT, 3
      value :CMD_DELETE, 4
      value :CMD_UTILITY, 5
      value :CMD_NOTHING, 6
    end
    add_enum "pg_query.JoinType" do
      value :JOIN_INNER, 0
      value :JOIN_LEFT, 1
      value :JOIN_FULL, 2
      value :JOIN_RIGHT, 3
      value :JOIN_SEMI, 4
      value :JOIN_ANTI, 5
      value :JOIN_UNIQUE_OUTER, 6
      value :JOIN_UNIQUE_INNER, 7
    end
    add_enum "pg_query.AggStrategy" do
      value :AGG_PLAIN, 0
      value :AGG_SORTED, 1
      value :AGG_HASHED, 2
      value :AGG_MIXED, 3
    end
    add_enum "pg_query.AggSplit" do
      value :AGGSPLIT_SIMPLE, 0
      value :AGGSPLIT_INITIAL_SERIAL, 1
      value :AGGSPLIT_FINAL_DESERIAL, 2
    end
    add_enum "pg_query.SetOpCmd" do
      value :SETOPCMD_INTERSECT, 0
      value :SETOPCMD_INTERSECT_ALL, 1
      value :SETOPCMD_EXCEPT, 2
      value :SETOPCMD_EXCEPT_ALL, 3
    end
    add_enum "pg_query.SetOpStrategy" do
      value :SETOP_SORTED, 0
      value :SETOP_HASHED, 1
    end
    add_enum "pg_query.OnConflictAction" do
      value :ONCONFLICT_NONE, 0
      value :ONCONFLICT_NOTHING, 1
      value :ONCONFLICT_UPDATE, 2
    end
    add_enum "pg_query.LimitOption" do
      value :LIMIT_OPTION_COUNT, 0
      value :LIMIT_OPTION_WITH_TIES, 1
      value :LIMIT_OPTION_DEFAULT, 2
    end
    add_enum "pg_query.LockClauseStrength" do
      value :LCS_NONE, 0
      value :LCS_FORKEYSHARE, 1
      value :LCS_FORSHARE, 2
      value :LCS_FORNOKEYUPDATE, 3
      value :LCS_FORUPDATE, 4
    end
    add_enum "pg_query.LockWaitPolicy" do
      value :LockWaitBlock, 0
      value :LockWaitSkip, 1
      value :LockWaitError, 2
    end
    add_enum "pg_query.LockTupleMode" do
      value :LockTupleKeyShare, 0
      value :LockTupleShare, 1
      value :LockTupleNoKeyExclusive, 2
      value :LockTupleExclusive, 3
    end
  end
end

module PgQuery
  Node = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.Node").msgclass
  Integer = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.Integer").msgclass
  Float = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.Float").msgclass
  String = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.String").msgclass
  BitString = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.BitString").msgclass
  Null = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.Null").msgclass
  List = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.List").msgclass
  OidList = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.OidList").msgclass
  IntList = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.IntList").msgclass
  Alias = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.Alias").msgclass
  RangeVar = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.RangeVar").msgclass
  TableFunc = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.TableFunc").msgclass
  Expr = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.Expr").msgclass
  Var = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.Var").msgclass
  Param = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.Param").msgclass
  Aggref = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.Aggref").msgclass
  GroupingFunc = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.GroupingFunc").msgclass
  WindowFunc = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.WindowFunc").msgclass
  SubscriptingRef = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.SubscriptingRef").msgclass
  FuncExpr = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.FuncExpr").msgclass
  NamedArgExpr = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.NamedArgExpr").msgclass
  OpExpr = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.OpExpr").msgclass
  DistinctExpr = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.DistinctExpr").msgclass
  NullIfExpr = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.NullIfExpr").msgclass
  ScalarArrayOpExpr = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.ScalarArrayOpExpr").msgclass
  BoolExpr = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.BoolExpr").msgclass
  SubLink = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.SubLink").msgclass
  SubPlan = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.SubPlan").msgclass
  AlternativeSubPlan = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.AlternativeSubPlan").msgclass
  FieldSelect = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.FieldSelect").msgclass
  FieldStore = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.FieldStore").msgclass
  RelabelType = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.RelabelType").msgclass
  CoerceViaIO = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.CoerceViaIO").msgclass
  ArrayCoerceExpr = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.ArrayCoerceExpr").msgclass
  ConvertRowtypeExpr = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.ConvertRowtypeExpr").msgclass
  CollateExpr = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.CollateExpr").msgclass
  CaseExpr = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.CaseExpr").msgclass
  CaseWhen = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.CaseWhen").msgclass
  CaseTestExpr = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.CaseTestExpr").msgclass
  ArrayExpr = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.ArrayExpr").msgclass
  RowExpr = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.RowExpr").msgclass
  RowCompareExpr = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.RowCompareExpr").msgclass
  CoalesceExpr = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.CoalesceExpr").msgclass
  MinMaxExpr = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.MinMaxExpr").msgclass
  SQLValueFunction = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.SQLValueFunction").msgclass
  XmlExpr = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.XmlExpr").msgclass
  NullTest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.NullTest").msgclass
  BooleanTest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.BooleanTest").msgclass
  CoerceToDomain = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.CoerceToDomain").msgclass
  CoerceToDomainValue = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.CoerceToDomainValue").msgclass
  SetToDefault = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.SetToDefault").msgclass
  CurrentOfExpr = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.CurrentOfExpr").msgclass
  NextValueExpr = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.NextValueExpr").msgclass
  InferenceElem = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.InferenceElem").msgclass
  TargetEntry = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.TargetEntry").msgclass
  RangeTblRef = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.RangeTblRef").msgclass
  JoinExpr = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.JoinExpr").msgclass
  FromExpr = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.FromExpr").msgclass
  OnConflictExpr = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.OnConflictExpr").msgclass
  IntoClause = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.IntoClause").msgclass
  RawStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.RawStmt").msgclass
  Query = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.Query").msgclass
  InsertStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.InsertStmt").msgclass
  DeleteStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.DeleteStmt").msgclass
  UpdateStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.UpdateStmt").msgclass
  SelectStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.SelectStmt").msgclass
  AlterTableStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.AlterTableStmt").msgclass
  AlterTableCmd = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.AlterTableCmd").msgclass
  AlterDomainStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.AlterDomainStmt").msgclass
  SetOperationStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.SetOperationStmt").msgclass
  GrantStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.GrantStmt").msgclass
  GrantRoleStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.GrantRoleStmt").msgclass
  AlterDefaultPrivilegesStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.AlterDefaultPrivilegesStmt").msgclass
  ClosePortalStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.ClosePortalStmt").msgclass
  ClusterStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.ClusterStmt").msgclass
  CopyStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.CopyStmt").msgclass
  CreateStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.CreateStmt").msgclass
  DefineStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.DefineStmt").msgclass
  DropStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.DropStmt").msgclass
  TruncateStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.TruncateStmt").msgclass
  CommentStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.CommentStmt").msgclass
  FetchStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.FetchStmt").msgclass
  IndexStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.IndexStmt").msgclass
  CreateFunctionStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.CreateFunctionStmt").msgclass
  AlterFunctionStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.AlterFunctionStmt").msgclass
  DoStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.DoStmt").msgclass
  RenameStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.RenameStmt").msgclass
  RuleStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.RuleStmt").msgclass
  NotifyStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.NotifyStmt").msgclass
  ListenStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.ListenStmt").msgclass
  UnlistenStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.UnlistenStmt").msgclass
  TransactionStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.TransactionStmt").msgclass
  ViewStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.ViewStmt").msgclass
  LoadStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.LoadStmt").msgclass
  CreateDomainStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.CreateDomainStmt").msgclass
  CreatedbStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.CreatedbStmt").msgclass
  DropdbStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.DropdbStmt").msgclass
  VacuumStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.VacuumStmt").msgclass
  ExplainStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.ExplainStmt").msgclass
  CreateTableAsStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.CreateTableAsStmt").msgclass
  CreateSeqStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.CreateSeqStmt").msgclass
  AlterSeqStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.AlterSeqStmt").msgclass
  VariableSetStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.VariableSetStmt").msgclass
  VariableShowStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.VariableShowStmt").msgclass
  DiscardStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.DiscardStmt").msgclass
  CreateTrigStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.CreateTrigStmt").msgclass
  CreatePLangStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.CreatePLangStmt").msgclass
  CreateRoleStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.CreateRoleStmt").msgclass
  AlterRoleStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.AlterRoleStmt").msgclass
  DropRoleStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.DropRoleStmt").msgclass
  LockStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.LockStmt").msgclass
  ConstraintsSetStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.ConstraintsSetStmt").msgclass
  ReindexStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.ReindexStmt").msgclass
  CheckPointStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.CheckPointStmt").msgclass
  CreateSchemaStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.CreateSchemaStmt").msgclass
  AlterDatabaseStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.AlterDatabaseStmt").msgclass
  AlterDatabaseSetStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.AlterDatabaseSetStmt").msgclass
  AlterRoleSetStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.AlterRoleSetStmt").msgclass
  CreateConversionStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.CreateConversionStmt").msgclass
  CreateCastStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.CreateCastStmt").msgclass
  CreateOpClassStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.CreateOpClassStmt").msgclass
  CreateOpFamilyStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.CreateOpFamilyStmt").msgclass
  AlterOpFamilyStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.AlterOpFamilyStmt").msgclass
  PrepareStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.PrepareStmt").msgclass
  ExecuteStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.ExecuteStmt").msgclass
  DeallocateStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.DeallocateStmt").msgclass
  DeclareCursorStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.DeclareCursorStmt").msgclass
  CreateTableSpaceStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.CreateTableSpaceStmt").msgclass
  DropTableSpaceStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.DropTableSpaceStmt").msgclass
  AlterObjectDependsStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.AlterObjectDependsStmt").msgclass
  AlterObjectSchemaStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.AlterObjectSchemaStmt").msgclass
  AlterOwnerStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.AlterOwnerStmt").msgclass
  AlterOperatorStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.AlterOperatorStmt").msgclass
  AlterTypeStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.AlterTypeStmt").msgclass
  DropOwnedStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.DropOwnedStmt").msgclass
  ReassignOwnedStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.ReassignOwnedStmt").msgclass
  CompositeTypeStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.CompositeTypeStmt").msgclass
  CreateEnumStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.CreateEnumStmt").msgclass
  CreateRangeStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.CreateRangeStmt").msgclass
  AlterEnumStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.AlterEnumStmt").msgclass
  AlterTSDictionaryStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.AlterTSDictionaryStmt").msgclass
  AlterTSConfigurationStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.AlterTSConfigurationStmt").msgclass
  CreateFdwStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.CreateFdwStmt").msgclass
  AlterFdwStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.AlterFdwStmt").msgclass
  CreateForeignServerStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.CreateForeignServerStmt").msgclass
  AlterForeignServerStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.AlterForeignServerStmt").msgclass
  CreateUserMappingStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.CreateUserMappingStmt").msgclass
  AlterUserMappingStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.AlterUserMappingStmt").msgclass
  DropUserMappingStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.DropUserMappingStmt").msgclass
  AlterTableSpaceOptionsStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.AlterTableSpaceOptionsStmt").msgclass
  AlterTableMoveAllStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.AlterTableMoveAllStmt").msgclass
  SecLabelStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.SecLabelStmt").msgclass
  CreateForeignTableStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.CreateForeignTableStmt").msgclass
  ImportForeignSchemaStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.ImportForeignSchemaStmt").msgclass
  CreateExtensionStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.CreateExtensionStmt").msgclass
  AlterExtensionStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.AlterExtensionStmt").msgclass
  AlterExtensionContentsStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.AlterExtensionContentsStmt").msgclass
  CreateEventTrigStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.CreateEventTrigStmt").msgclass
  AlterEventTrigStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.AlterEventTrigStmt").msgclass
  RefreshMatViewStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.RefreshMatViewStmt").msgclass
  ReplicaIdentityStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.ReplicaIdentityStmt").msgclass
  AlterSystemStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.AlterSystemStmt").msgclass
  CreatePolicyStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.CreatePolicyStmt").msgclass
  AlterPolicyStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.AlterPolicyStmt").msgclass
  CreateTransformStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.CreateTransformStmt").msgclass
  CreateAmStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.CreateAmStmt").msgclass
  CreatePublicationStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.CreatePublicationStmt").msgclass
  AlterPublicationStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.AlterPublicationStmt").msgclass
  CreateSubscriptionStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.CreateSubscriptionStmt").msgclass
  AlterSubscriptionStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.AlterSubscriptionStmt").msgclass
  DropSubscriptionStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.DropSubscriptionStmt").msgclass
  CreateStatsStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.CreateStatsStmt").msgclass
  AlterCollationStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.AlterCollationStmt").msgclass
  CallStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.CallStmt").msgclass
  AlterStatsStmt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.AlterStatsStmt").msgclass
  A_Expr = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.A_Expr").msgclass
  ColumnRef = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.ColumnRef").msgclass
  ParamRef = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.ParamRef").msgclass
  A_Const = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.A_Const").msgclass
  FuncCall = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.FuncCall").msgclass
  A_Star = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.A_Star").msgclass
  A_Indices = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.A_Indices").msgclass
  A_Indirection = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.A_Indirection").msgclass
  A_ArrayExpr = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.A_ArrayExpr").msgclass
  ResTarget = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.ResTarget").msgclass
  MultiAssignRef = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.MultiAssignRef").msgclass
  TypeCast = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.TypeCast").msgclass
  CollateClause = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.CollateClause").msgclass
  SortBy = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.SortBy").msgclass
  WindowDef = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.WindowDef").msgclass
  RangeSubselect = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.RangeSubselect").msgclass
  RangeFunction = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.RangeFunction").msgclass
  RangeTableSample = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.RangeTableSample").msgclass
  RangeTableFunc = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.RangeTableFunc").msgclass
  RangeTableFuncCol = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.RangeTableFuncCol").msgclass
  TypeName = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.TypeName").msgclass
  ColumnDef = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.ColumnDef").msgclass
  IndexElem = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.IndexElem").msgclass
  Constraint = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.Constraint").msgclass
  DefElem = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.DefElem").msgclass
  RangeTblEntry = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.RangeTblEntry").msgclass
  RangeTblFunction = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.RangeTblFunction").msgclass
  TableSampleClause = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.TableSampleClause").msgclass
  WithCheckOption = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.WithCheckOption").msgclass
  SortGroupClause = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.SortGroupClause").msgclass
  GroupingSet = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.GroupingSet").msgclass
  WindowClause = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.WindowClause").msgclass
  ObjectWithArgs = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.ObjectWithArgs").msgclass
  AccessPriv = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.AccessPriv").msgclass
  CreateOpClassItem = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.CreateOpClassItem").msgclass
  TableLikeClause = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.TableLikeClause").msgclass
  FunctionParameter = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.FunctionParameter").msgclass
  LockingClause = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.LockingClause").msgclass
  RowMarkClause = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.RowMarkClause").msgclass
  XmlSerialize = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.XmlSerialize").msgclass
  WithClause = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.WithClause").msgclass
  InferClause = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.InferClause").msgclass
  OnConflictClause = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.OnConflictClause").msgclass
  CommonTableExpr = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.CommonTableExpr").msgclass
  RoleSpec = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.RoleSpec").msgclass
  TriggerTransition = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.TriggerTransition").msgclass
  PartitionElem = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.PartitionElem").msgclass
  PartitionSpec = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.PartitionSpec").msgclass
  PartitionBoundSpec = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.PartitionBoundSpec").msgclass
  PartitionRangeDatum = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.PartitionRangeDatum").msgclass
  PartitionCmd = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.PartitionCmd").msgclass
  VacuumRelation = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.VacuumRelation").msgclass
  InlineCodeBlock = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.InlineCodeBlock").msgclass
  CallContext = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.CallContext").msgclass
  OverridingKind = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.OverridingKind").enummodule
  QuerySource = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.QuerySource").enummodule
  SortByDir = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.SortByDir").enummodule
  SortByNulls = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.SortByNulls").enummodule
  A_Expr_Kind = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.A_Expr_Kind").enummodule
  RoleSpecType = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.RoleSpecType").enummodule
  TableLikeOption = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.TableLikeOption").enummodule
  DefElemAction = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.DefElemAction").enummodule
  PartitionRangeDatumKind = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.PartitionRangeDatumKind").enummodule
  RTEKind = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.RTEKind").enummodule
  WCOKind = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.WCOKind").enummodule
  GroupingSetKind = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.GroupingSetKind").enummodule
  CTEMaterialize = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.CTEMaterialize").enummodule
  SetOperation = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.SetOperation").enummodule
  ObjectType = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.ObjectType").enummodule
  DropBehavior = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.DropBehavior").enummodule
  AlterTableType = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.AlterTableType").enummodule
  GrantTargetType = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.GrantTargetType").enummodule
  VariableSetKind = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.VariableSetKind").enummodule
  ConstrType = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.ConstrType").enummodule
  ImportForeignSchemaType = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.ImportForeignSchemaType").enummodule
  RoleStmtType = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.RoleStmtType").enummodule
  FetchDirection = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.FetchDirection").enummodule
  FunctionParameterMode = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.FunctionParameterMode").enummodule
  TransactionStmtKind = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.TransactionStmtKind").enummodule
  ViewCheckOption = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.ViewCheckOption").enummodule
  ClusterOption = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.ClusterOption").enummodule
  DiscardMode = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.DiscardMode").enummodule
  ReindexObjectType = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.ReindexObjectType").enummodule
  AlterTSConfigType = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.AlterTSConfigType").enummodule
  AlterSubscriptionType = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.AlterSubscriptionType").enummodule
  OnCommitAction = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.OnCommitAction").enummodule
  ParamKind = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.ParamKind").enummodule
  CoercionContext = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.CoercionContext").enummodule
  CoercionForm = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.CoercionForm").enummodule
  BoolExprType = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.BoolExprType").enummodule
  SubLinkType = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.SubLinkType").enummodule
  RowCompareType = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.RowCompareType").enummodule
  MinMaxOp = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.MinMaxOp").enummodule
  SQLValueFunctionOp = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.SQLValueFunctionOp").enummodule
  XmlExprOp = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.XmlExprOp").enummodule
  XmlOptionType = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.XmlOptionType").enummodule
  NullTestType = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.NullTestType").enummodule
  BoolTestType = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.BoolTestType").enummodule
  CmdType = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.CmdType").enummodule
  JoinType = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.JoinType").enummodule
  AggStrategy = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.AggStrategy").enummodule
  AggSplit = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.AggSplit").enummodule
  SetOpCmd = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.SetOpCmd").enummodule
  SetOpStrategy = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.SetOpStrategy").enummodule
  OnConflictAction = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.OnConflictAction").enummodule
  LimitOption = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.LimitOption").enummodule
  LockClauseStrength = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.LockClauseStrength").enummodule
  LockWaitPolicy = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.LockWaitPolicy").enummodule
  LockTupleMode = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("pg_query.LockTupleMode").enummodule
end
